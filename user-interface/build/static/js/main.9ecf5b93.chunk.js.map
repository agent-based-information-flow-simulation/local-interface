{"version":3,"sources":["features/tab_panel/TabPanel.js","features/counter/counterAPI.js","features/counter/counterSlice.js","features/agents_tab/agentsTabSlice.js","features/message_tab/messageTabSlice.js","features/components/enumSlice.js","features/simulationSlice.js","features/agents_tab/editors/editorSlice.js","app/store.js","app/utils.js","features/components/FloatParam.js","features/components/NewEnumVal.js","features/components/EnumVal.js","features/components/EnumParam.js","features/components/ListParam.js","features/components/ParamsDialog.js","features/agents_tab/editors/statements/ExprStatement.js","features/agents_tab/editors/InlineText.js","features/agents_tab/editors/statements/DeclStatement.js","features/agents_tab/editors/statements/CondFloatStatement.js","features/agents_tab/editors/statements/CondEnumStatement.js","features/agents_tab/editors/statements/EndBlockStatement.js","features/agents_tab/editors/statements/WhileEnumStatement.js","features/agents_tab/editors/statements/WhileFloatStatement.js","features/agents_tab/editors/statements/AssignFloatStatement.js","features/agents_tab/editors/statements/CondListStatement.js","features/agents_tab/editors/statements/AddElemStatement.js","features/agents_tab/editors/statements/RemElemStatement.js","features/agents_tab/editors/statements/RemNElemsStatement.js","features/agents_tab/editors/statements/ClearListStatement.js","features/agents_tab/editors/statements/AssignEnumStatement.js","features/agents_tab/editors/statements/SendStatement.js","features/agents_tab/editors/statements/GetLenStatement.js","features/agents_tab/editors/statements/SubsetListStatement.js","features/agents_tab/editors/StatementDisplay.js","features/agents_tab/editors/FloatParamEditor.js","features/agents_tab/editors/EnumParamEditor.js","features/agents_tab/editors/ListParamEditor.js","features/agents_tab/editors/SendMessageEditor.js","features/agents_tab/editors/ActionEditor.js","features/agents_tab/behavs/OnSetupBehav.js","features/agents_tab/behavs/OneTimeBehav.js","features/agents_tab/behavs/CyclicBehav.js","features/agents_tab/behavs/MessageRecvBehav.js","features/agents_tab/BehavDialog.js","features/components/SelectList.js","features/components/DisplayList.js","features/agents_tab/AgentsTab.js","features/components/MessageFloatParam.js","features/components/MessageParamsDialog.js","features/message_tab/MessageTab.js","features/graph_tab/editors/StatisticalRow.js","features/graph_tab/editors/StatisticalDescEditor.js","features/graph_tab/GraphTab.js","features/visualization_tab/VisualizationTab.js","App.js","serviceWorker.js","index.js"],"names":["TabPanel","props","children","value","index","other","role","hidden","id","aria-labelledby","Box","sx","p","Typography","a11yProps","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","name","initialState","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","agentsTabSlice","agents","current_selected","parameters","behaviours","addParam","param_count","newArr","JSON","parse","stringify","push","addBehav","addAction","reset","console","log","selectParameters","agentsTab","selectBehaviours","messageTabSlice","msg_type_count","messages","addMessage","setCurrentParam","clearParams","messageTab","enumSlice","enum_count","enums","addEnum","find","el","selectEnums","simulationSlice","agent_types","message_types","graph","names","addAgent","addName","setGraph","selectGraph","simulation","selectMessageTypes","selectAgents","editorSlice","scopeVars","openBlocks","addScopeVar","resetScope","resetActions","openBlock","closeBlock","selectScopeVars","editor","selectActions","selectBlockLvl","store","configureStore","reducer","counter","counterReducer","agentsTabReducer","messageTabReducer","enumSliceReducer","simulationSliceReducer","editorSliceReducer","reserved_names","FIPACommActs","format","errorCodes","code","info","validateGeneralNameRules","hasWhiteSpace","isNaN","parseFloat","test","undefined","toLowerCase","length","validateAgentName","getState","res","validateMessageName","performative","type","validateBehavName","s","some","char","includes","distributionsDict","normal","arg_count","param_names","validate","args","exp","FloatParam","save","useState","floatType","setFloatType","initVal","setInitVal","Object","keys","distribution","setDistribution","distributionArgs","setDistributionArgs","paramName","setParamName","paramData","setParamData","displayError","setDisplayError","errorText","setErrorText","updateParamData","newParamData","distribution_args","useEffect","FormControl","fullWidth","marginTop","TextField","variant","label","onChange","e","target","Select","MenuItem","newArgs","Array","fill","handleDistributionChange","map","key","split","parseInt","handleDistributionArgChange","InputProps","inputProps","step","margin","Alert","severity","onClose","Button","onClick","validateFloatParam","error","NewEnumVal","addEnumVal","enumValName","onChangeField","Paper","component","display","alignItems","ml","flex","placeholder","helperText","IconButton","color","EnumVal","enumState","enumVals","setPercentage","removeEnumVal","ListItem","disablePadding","ListItemText","primary","percentage","startAdornment","InputAdornment","position","min","max","width","EnumParam","enumType","setEnumType","setEnumState","selectedExistingEnum","setSelectedExistingEnum","useSelector","setEnumVals","setEnumValName","enumValNameError","setEnumValNameError","percentageError","setPrecentageError","selectedIndex","setSelectedIndex","filter","item","newVals","findIndex","sum","i","updateVals","oldEnumData","RadioGroup","FormControlLabel","control","Radio","List","newVal","values","validateEnumParam","ListParam","listType","setListType","xd","validateListParam","ParamsDialog","dispatch","useDispatch","open","paramCandidate","param","mode","val","selectedInit","createParam","ModeDisplay","Dialog","event","reason","disableAutoFocus","disableEnforceFocus","maxWidth","Container","padding","DialogTitle","FloatExprOps","opcode","ExprStatement","setEditOn","lhsCandidates","rhsCandidates","curLhs","setCurLhs","lhsError","setLhsError","curRhs","setCurRhs","rhsError","setRhsError","curOpCode","setCurOpCode","Stack","direction","Autocomplete","freeSolo","options","renderInput","params","inputValue","onInputChange","handleLhsChange","op","handleRhsChange","err_flag","statement","fontSize","InlineText","textAlign","verticalAlign","text","DeclStatement","variables","typeLookup","variable","FloatCondOps","CondFloatStatement","operation","EnumCondOps","CondEnumStatement","setRhsCandidates","disabled","EndBlockStatement","WhileEnumStatement","WhileFloatStatement","AssignFloatStatement","ListCondOps","CondListStatement","AddElemStatement","rhsOptions","setRhsOptions","found","tmpArr","RemElemStatement","RemNElemsStatement","ClearListStatement","curArg","setCurArg","AssignEnumStatement","SendStatement","connLists","receiver","setReceiver","GetLenStatement","SubsetListStatement","numCandidates","curNum","setCurNum","numError","setNumError","setTypeError","lhs","rhs","read_only","StatementDisplay","editOn","statementType","sndMsg","rcvMsg","mutFloats","setMutFloats","floats","setFloats","setEnums","setConnLists","setMsgLists","lists","setLists","listItems","setListItems","rcvJid","rcvVar","sendVar","connectionsVar","floatParams","toSetMutFloats","toSetListItems","toSetFloats","rcvParams","tmpEnums","FloatParamEditor","setStatementType","FormHelperText","EnumParamEditor","ListParamEditor","SendMessageEditor","ActionEditor","actionType","setActionType","selectedParam","setSelectedParam","setSndMsg","blockError","setBlockError","existingActions","actionName","setActionName","nameError","setNameError","sendError","setSendError","statements","setStatements","statementError","setStatementError","actionOperations","setActionOperations","block_lvl","StatementsList","indentLevel","indexes","end_indexes","reduce","arr","startsWith","if_indexes","stack","bad_ends","forEach","ind","pop","findUnmatchedIndexes","correct","style","marginLeft","Math","fullScreen","FormGroup","select","error_flag","parsedOpArr","rawOpArr","splice","script","join","ret_action","OnSetupBehav","behavName","setBehavName","actionDialogOpen","setActionDialogOpen","nameErrorText","setNameErrorText","actionError","setActionError","behav","OneTimeBehav","delay","setDelay","CyclicBehav","cycle","setCycle","MessageRecvBehav","selectedMsg","setSelectedMsg","messageError","setMessageError","BehavDialog","handleClose","saveCallback","SelectList","collection","handleParamTypeChange","collectionItemClick","collectionDisplayFunction","itemDisplay","minWidth","bgcolor","aria-label","minHeight","maxHeight","border","borderColor","overflow","ListItemButton","InputLabel","DisplayList","onItemClick","selectedItem","height","AgentsTab","React","paramDialogOpen","setParamDialogOpen","behavDialogOpen","setBehavDialogOpen","paramDialogType","setParamDialogType","behavDialogType","setBehavDialogType","notifyError","setNotifyError","agentName","setAgentName","behavError","setBehavError","paramError","setParamError","behavs","handleNotifyClose","DialogContent","DialogContentText","DialogActions","divider","Divider","orientation","flexItem","borderWidth","spacing","paddingTop","dataset","err_code","slice","generatePRM","agent","MessageFloatParam","MessageParamsDialog","MessageTab","paramListOptions","fipaType","setFipaType","setOpen","dialogType","setDialogType","msgName","setMsgName","paramClick","it","newMsg","StatisticalRow","agentData","handleChange","setMode","setAmount","connAmountData","setConnAmountData","distArgsOn","setDistArgsOn","toChange","setToChange","updateAgentData","tmpAd","foundKey","draw_from_distribution","dist_args","conn_amount","justifyContent","borderRight","whiteSpace","paddingLeft","paddingRight","handleConnDataChange","errorAlerts","1","2","3","4","StatisticalDescEditor","setAgentData","errorData","setErrorData","codeCallback","ad","prevRes","generateDEFG","setRowError","errArr","handleAgentDataChange","new_data","Grid","container","xs","graphDescTypes","GraphTab","modeIndex","setModeIndex","defgCode","setDefgCode","setError","success","setSuccess","alertText","setAlertText","alertDisplay","setAlertDisplay","codeSet","setCodeSet","graphSize","setGraphSize","showError","setShowError","graphData","setGraphData","alertClose","size","VisualizationTab","runningSimulations","setRunningSimulations","simulationsOutput","setSimulationsOutput","selectedSimulationId","setSelectedSimulationId","setCode","runningSimulationsWebsocket","WebSocket","debug","onmessage","message","running_simulations","onclose","simulationId","startNewSimulation","url","process","REACT_APP_SIMULATION_LOAD_BALANCER_URL","code_lines","code_data","fetch","method","json","prevState","simulationOutputWebsocket","outputLine","line","deleteSimulation","tmp_code","generateCode","App","setValue","className","borderBottom","Tabs","newValue","Tab","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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UAAWsC,G,GAAAA,aAE5DG,GAAkB,SAACjE,GAAD,OAAWA,EAAMkE,OAAOR,WAE1CS,GAAgB,SAACnE,GAAD,OAAWA,EAAMkE,OAAOxD,SAExC0D,GAAiB,SAACpE,GAC7B,OAAOA,EAAMkE,OAAOP,YAGPF,MAAf,QCpCaY,GAAQC,YAAe,CAClCC,QAAS,CACPC,QAASC,EACT5C,UAAW6C,EACXrC,WAAYsC,EACZrC,UAAWsC,GACXtB,WAAYuB,GACZX,OAAQY,MCbNC,GAAiB,CACrB,OACA,cACA,MACA,MACA,QACA,OACA,SACA,OACA,WACA,SACA,QACA,OACA,QACA,OACA,OACA,8BACA,oBACA,kBACA,aACA,gBACA,eACA,QACA,OACA,OACA,MACA,KACA,SACA,QACA,QACA,QACA,QACA,WACA,MACA,MACA,OACA,OACA,SACA,UACA,MACA,OACA,SACA,KACA,SACA,KACA,KACA,SACA,WACA,MACA,KACA,OACA,QACA,SACA,MACA,QACA,OACA,SAGWC,GAAe,CAC1B,iBACA,QACA,SACA,kBACA,UACA,aACA,UACA,SACA,WACA,YACA,gBACA,YACA,UACA,QACA,UACA,WACA,SACA,iBACA,UACA,cACA,kBACA,aAGIC,GAAS,uCAEFC,GAAa,CASxB,CACEC,KAAM,IACNC,KAAM,6BAER,CACED,KAAM,IACNC,KAAM,oCAER,CACED,KAAM,IACNC,KAAM,oCAER,CACED,KAAM,IACNC,KAAM,qHAER,CACED,KAAM,IACNC,KAAM,4EAER,CACED,KAAM,IACNC,KAAM,yBAER,CACED,KAAM,IACNC,KAAM,qCAER,CACED,KAAM,IACNC,KAAM,6BAER,CACED,KAAM,IACNC,KAAM,8BAER,CACED,KAAM,IACNC,KAAM,mCAER,CACED,KAAM,IACNC,KAAM,+DAER,CACED,KAAM,IACNC,KAAM,uCAER,CACED,KAAM,IACNC,KAAM,uBAGR,CACED,KAAM,IACNC,KAAM,iEAIGC,GAA2B,SAAC1F,GACvC,OAAI2F,GAAc3F,GACT,IACG4F,MAAMC,WAAW7F,EAAK,KAEvBsF,GAAOQ,KAAK9F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","file":"static/js/main.9ecf5b93.chunk.js","sourcesContent":["import React from 'react';\nimport Box from \"@mui/material/Box\";\nimport PropTypes from \"prop-types\";\nimport Typography from \"@mui/material/Typography\";\n\n\nexport function TabPanel(props) {\n  const { children, value, index, ...other } = props;\n\n  return (\n    <div\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`simple-tabpanel-${index}`}\n      aria-labelledby={`simple-tab-${index}`}\n      {...other}\n    >\n      {value === index && (\n        <Box sx={{ p: 2 }}>\n          <Typography>{children}</Typography>\n        </Box>\n      )}\n    </div>\n  );\n}\n\nTabPanel.propTypes = {\n  children: PropTypes.node,\n  index: PropTypes.number.isRequired,\n  value: PropTypes.number.isRequired,\n};\n\nexport function a11yProps(index) {\n  return {\n    id: `simple-tab-${index}`,\n    \"aria-controls\": `simple-tabpanel-${index}`,\n  };\n}","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchCount } from './counterAPI';\n\nconst initialState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount) => (dispatch, getState) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  agents: [],\n  current_selected: -1,\n  parameters: [],\n  behaviours: [],\n  actions: [],\n}\n\nexport const agentsTabSlice = createSlice({\n  name: 'agentsTab',\n  initialState,\n  reducers: {\n    addParam: (state, action) => {\n      state.param_count += 1;\n      let newArr = JSON.parse(JSON.stringify(state.parameters))\n      newArr.push(action.payload);\n      state.parameters = newArr;\n    },\n    addBehav: (state, action) => {\n      state.behaviours.push(action.payload);\n    },\n    addAction: (state, action) => {\n      state.actions.push(action.payload);\n    },\n    reset: (state, action) => {\n      console.log(\"RESETING\")\n      state.parameters = [];\n      state.behaviours = [];\n    }\n  }\n});\n\nexport const {addParam, addBehav, reset} = agentsTabSlice.actions;\n\nexport const selectCurrentAgent = (state) => {\n  if (state.current_selected !== -1)\n    return state.agents[state.current_selected];\n  //TODO Else, deselect, return something magical\n}\n\nexport const selectAgents = (state) => {\n  return state.agentsTab.agents;\n}\n\nexport const selectActions = (state) => {\n  return state.agentsTab.actions;\n}\n\nexport const selectParameters = (state) => {\n  return state.agentsTab.parameters;\n}\n\nexport const selectBehaviours = (state) => {\n  return state.agentsTab.behaviours;\n}\n\n\nexport default agentsTabSlice.reducer;","import { createSlice } from '@reduxjs/toolkit';\n\nconst initialState = {\n  msg_type_count: 0,\n  current_selected: -1,\n  messages: [],\n  parameters: [],\n  param_count: 0,\n}\n\nexport const messageTabSlice = createSlice({\n  name: 'messageTab',\n  initialState,\n  reducers: {\n    addMessage: (state, action) => {\n      state.msg_type_count += 1;\n      state.messages.push(action.payload);\n    },\n    addParam: (state, action) => {\n      state.param_count += 1;\n      let newArr = JSON.parse(JSON.stringify(state.parameters))\n      newArr.push(action.payload)\n      state.parameters = newArr;\n    },\n    setCurrentParam: (state, action) => {\n      state.current_selected = action.payload;\n    },\n    clearParams: (state, action) => {\n      state.param_count = 0;\n      state.parameters = [];\n    }\n  }\n})\n\nexport const {addMessage, addParam, setCurrentParam, clearParams} = messageTabSlice.actions;\n\nexport const selectParameters = (state) => {\n  return state.messageTab.parameters;\n}\n\nexport const selectCurrentParam = (state) => {\n  if(state.messageTab.current_selected >= 0 && state.messageTab.current_selected < state.messageTab.param_count)\n    return state.messageTab.parameters[state.messageTab.current_selected];\n  else\n    return null;\n}\n\nexport default messageTabSlice.reducer","import {createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  enum_count: 0,\n  enums: [],\n}\n\nexport const enumSlice = createSlice({\n  name: \"enumState\",\n  initialState,\n  reducers: {\n    addEnum: (state, action) => {\n      let name = action.payload.name;\n      if (state.enums.find(el => el.name === name) !== -1){\n        state.enum_count += 1;\n        state.enums.push(action.payload);\n      }\n    }\n  }\n})\n\nexport const {addEnum} = enumSlice.actions;\n\nexport const selectEnums = (state) => {\n  return state.enumSlice.enums;\n}\n\nexport default enumSlice.reducer;","import {createSlice} from '@reduxjs/toolkit';\n\nconst initialState = {\n  agent_types: [],\n  message_types: [],\n  graph: {},\n  names: [],\n}\n\nexport const simulationSlice = createSlice({\n  name: 'simulation',\n  initialState,\n  reducers: {\n    addMessage: (state, action) => {\n      state.message_types.push(action.payload);\n    },\n    addAgent: (state, action) => {\n      state.agent_types.push(action.payload);\n    },\n    addName: (state, action) => {\n      state.names.push(action.payload);\n    },\n    setGraph: (state, action) => {\n      state.graph = action.payload;\n    }\n  }\n})\n\nexport const {addMessage, addAgent, addName, setGraph} = simulationSlice.actions;\n\nexport const selectGraph = (state) => {\n  return state.simulation.graph;\n}\n\nexport const selectMessageTypes = (state) => {\n  return state.simulation.message_types;\n}\n\nexport const selectNames = (state) => {\n  return state.simulation.names;\n}\n\nexport const selectAgents = (state) => {\n  return state.simulation.agent_types;\n}\n\nexport default simulationSlice.reducer;","import { createSlice } from \"@reduxjs/toolkit\";\n\nconst initialState = {\n  scopeVars: [],\n  openBlocks: 0,\n  actions: [],\n}\n\nexport const editorSlice = createSlice({\n  name: 'editor',\n  initialState,\n  reducers: {\n    addScopeVar: (state, action) => {\n      state.scopeVars.push(action.payload);\n    },\n    resetScope: (state, action) => {\n      console.log(\"resetting\")\n      state.scopeVars = []\n    },\n    resetActions: (state, action) => {\n      state.actions = [];\n    },\n    openBlock: (state, action) => {\n      state.openBlocks += 1;\n    },\n    closeBlock: (state, action) => {\n      state.openBlocks -= 1;\n    },\n    addAction: (state, action) => {\n      state.actions.push(action.payload);\n    }\n  }\n})\n\nexport const {addScopeVar, resetScope, openBlock, closeBlock, addAction, resetActions} = editorSlice.actions;\n\nexport const selectScopeVars = (state) => state.editor.scopeVars;\n\nexport const selectActions = (state) => state.editor.actions;\n\nexport const selectBlockLvl = (state) =>{\n  return state.editor.openBlocks;\n}\n\nexport default editorSlice.reducer;","import { configureStore } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\nimport agentsTabReducer from '../features/agents_tab/agentsTabSlice';\nimport messageTabReducer from '../features/message_tab/messageTabSlice';\nimport enumSliceReducer from '../features/components/enumSlice';\nimport simulationSliceReducer from '../features/simulationSlice';\nimport editorSliceReducer from \"../features/agents_tab/editors/editorSlice\";\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    agentsTab: agentsTabReducer,\n    messageTab: messageTabReducer,\n    enumSlice: enumSliceReducer,\n    simulation: simulationSliceReducer,\n    editor: editorSliceReducer,\n  },\n});\n","import { store } from \"./store\";\n\nconst reserved_names = [\n  \"send\",\n  \"connections\",\n  \"rcv\",\n  \"len\",\n  \"round\",\n  \"list\",\n  \"filter\",\n  \"self\",\n  \"datetime\",\n  \"random\",\n  \"numpy\",\n  \"json\",\n  \"spade\",\n  \"copy\",\n  \"uuid\",\n  \"get_json_from_spade_message\",\n  \"get_spade_message\",\n  \"backupbehaviour\",\n  \"backup_url\",\n  \"backup_period\",\n  \"backup_delay\",\n  \"false\",\n  \"none\",\n  \"true\",\n  \"and\",\n  \"as\",\n  \"assert\",\n  \"async\",\n  \"await\",\n  \"break\",\n  \"class\",\n  \"continue\",\n  \"def\",\n  \"del\",\n  \"elif\",\n  \"else\",\n  \"except\",\n  \"finally\",\n  \"for\",\n  \"from\",\n  \"global\",\n  \"if\",\n  \"import\",\n  \"in\",\n  \"is\",\n  \"lambda\",\n  \"nonlocal\",\n  \"not\",\n  \"or\",\n  \"pass\",\n  \"raise\",\n  \"return\",\n  \"try\",\n  \"while\",\n  \"with\",\n  \"yield\",\n];\n\nexport const FIPACommActs = [\n  \"AcceptProposal\",\n  \"Agree\",\n  \"Cancel\",\n  \"CallForProposal\",\n  \"Confirm\",\n  \"Disconfirm\",\n  \"Failure\",\n  \"Inform\",\n  \"InformIf\",\n  \"InformRef\",\n  \"NotUnderstood\",\n  \"Propagate\",\n  \"Propose\",\n  \"Proxy\",\n  \"QueryIf\",\n  \"QueryRef\",\n  \"Refuse\",\n  \"RejectProposal\",\n  \"Request\",\n  \"RequestWhen\",\n  \"RequestWhenever\",\n  \"Subscribe\",\n];\n\nconst format = /[!@#$%^&*()+`\\-=[\\]{};':\"\\\\|,.<>/?]+/;\n\nexport const errorCodes = [\n  /*\n  1XX - name errors\n  2XX - performative errors\n  3XX - value errors\n  4XX - distribution errors\n  5XX - enum errors\n  9XX - other errors\n  */\n  {\n    code: 101,\n    info: \"Name cannot be duplicate!\",\n  },\n  {\n    code: 102,\n    info: \"Name cannot contain whitespaces!\",\n  },\n  {\n    code: 103,\n    info: \"Name cannot start with a number!\",\n  },\n  {\n    code: 104,\n    info: \"Name can't contain any of the following characters: ! @ # $ % ^ & * ( ) ` + - = [ ] { } ; ' : \\\" \\\\ | , . < > / ?\",\n  },\n  {\n    code: 105,\n    info: \"Name can't be a reserved name. Consult documentation for reserved names.\", // TODO add link?\n  },\n  {\n    code: 106,\n    info: \"Name cannot be empty!\"\n  },\n  {\n    code: 201,\n    info: \"Select a valid performative type!\",\n  },\n  {\n    code: 301,\n    info: \"Invalid value for a float\"\n  },\n  {\n    code: 401,\n    info: \"Invalid distribution name!\"\n  },\n  {\n    code: 402,\n    info: \"Invalid distribution arguments!\"\n  },\n  {\n    code: 501,\n    info: \"Too few enum values! At least two enum values are required!\"\n  },\n  {\n    code: 502,\n    info: \"The sum of percentages must be 100!\"\n  },\n  {\n    code: 503,\n    info: \"Invalid init value!\"\n\n  },\n  {\n    code: 901,\n    info: \"Unexpected error: Invalid param type! Contact the developers\"\n  }\n];\n\nexport const validateGeneralNameRules = (name) => {\n  if (hasWhiteSpace(name)) {\n    return 102;\n  } else if (!isNaN(parseFloat(name[0]))) {\n    return 103;\n  } else if (format.test(name)) {\n    return 104;\n  } else if (reserved_names.find((el) => el === name.toLowerCase()) !== undefined) {\n    return 105;\n  } else if (name.length === 0){\n    return 106;\n  }\n  return 0;\n}\n\n\nexport const validateAgentName = (name) => {\n  const state = store.getState();\n  const res = validateGeneralNameRules(name);\n  if( res !== 0) return res;\n  //check if agent with the same name exists\n  else if(state.simulation.agent_types.find((el) => el.name === name) !== undefined){\n    return 101;\n  }\n  return 0;\n}\n\nexport const validateMessageName = (name, performative) => {\n  const state = store.getState();\n  const res = validateGeneralNameRules(name);\n  if( res !== 0) return res;\n  //check if agent with the same name exists\n  else if (\n    state.simulation.message_types.find(\n      (el) => el.name === name && el.type === performative\n    )\n  ) {\n    return 101;\n  } else if (FIPACommActs.find((el) => el === performative) === undefined) {\n    return 201;\n  }\n  return 0;\n}\n\nexport const validateBehavName = (name) => {\n  const state = store.getState();\n  const res = validateGeneralNameRules(name);\n  if( res !== 0) return res;\n  else if (state.agentsTab.behaviours.find((el) => el.name === name)) {\n    return 101;\n  }\n  return 0;\n};\n\nexport const validateQualifiedName = (name) => {\n  const state = store.getState();\n  if (state.simulation.names.find((el) => el === name)) {\n    console.log(\"namae wa duplicatedo\");\n    return false;\n  }\n  if (name === \"\") {\n    console.log(\"namae wa emptey\");\n    return false;\n  } else if (hasWhiteSpace(name)) {\n    console.log(\"namawe wa blanku spaco\");\n    return false;\n  } else if (!isNaN(parseFloat(name[0]))) {\n    console.log(\"namae wa numero\");\n    return false;\n  } else if (format.test(name)) {\n    console.log(\"namae wa charactero specialo\");\n    return false;\n  }\n  return true;\n};\n\nfunction hasWhiteSpace(s) {\n  const whitespaceChars = [\" \", \"\\t\", \"\\n\"];\n  return whitespaceChars.some((char) => s.includes(char));\n}\n\nexport const distributionsDict = {\n  normal: {\n    name: \"Normal\",\n    arg_count: 2,\n    param_names: [\"miu\", \"sigma\"],\n    validate: (args) => {\n      if (args.length !== distributionsDict[\"normal\"].arg_count) {\n        return false;\n      }\n      if (args[1] <= 0) {\n        //sigma > 0\n        return false;\n      }\n      return true;\n    },\n  },\n  exp: {\n    name: \"Exponential\",\n    arg_count: 1,\n    param_names: [\"lambda\"],\n    validate: (args) => {\n      if (args.length !== distributionsDict[\"exp\"].arg_count) {\n        return false;\n      }\n      if (args[0] <= 0) {\n        // lambda > 0\n        return false;\n      }\n      return true;\n    },\n  },\n};\n\nexport const validateFloatParam = (paramData) => {\n  //validate param name\n  const name = paramData.name;\n  const state = store.getState();\n  const res = validateGeneralNameRules(name);\n  if( res !== 0) return res;\n  else if (state.agentsTab.parameters.find((el) => el.name === name)) {\n    return 101;\n  }\n  switch(paramData.type){\n    case \"initVal\":\n      if(isNaN(parseFloat(paramData.initVal))){\n        return 301;\n      }\n      break;\n    case \"distribution\":\n      console.log(typeof(paramData.distribution))\n      console.log(paramData.distribution)\n      if(distributionsDict[paramData.distribution] === undefined){\n        return 401;\n      }else{\n        const dist = distributionsDict[paramData.distribution];\n        if(!dist.validate(paramData.distribution_args)){\n          return 402;\n        }\n      }\n      break;\n    default:\n      return 901;\n  }\n  return 0;\n}\n\nexport const validateEnumParam = (paramData) => {\n  const name = paramData.name;\n  const state = store.getState();\n  const res = validateGeneralNameRules(name);\n  if( res !== 0) return res;\n  else if (state.agentsTab.parameters.find((el) => el.name === name)) {\n    return 101;\n  }\n  switch(paramData.type){\n    case \"new\":\n      const values = paramData.enumVals;\n      if(values.length < 2){\n        return 501;\n      }\n      switch(paramData.state){\n        case \"init\":\n          //valid if and only if there exists 1 ev with percentage 100%\n          if(values.filter(el => parseFloat(el.percentage) === 100).length !== 1){\n            return 503;\n          }\n          break;\n        case \"percentages\":\n          let sum = 0;\n          for(let i=0; i<values.length; i++){\n            sum += parseFloat(values[i].percentage);\n          }\n          if(sum !== 100){\n            return 502;\n          }\n          break;\n        default:\n          return 901;\n\n      }\n      break;\n    case \"existing\":\n      return 0; // existing enum has been already validated\n    default:\n      return 901;\n  }\n  return 0;\n}\n\nexport const validateListParam = (paramData) => {\n  const name = paramData.name;\n  const state = store.getState();\n  const res = validateGeneralNameRules(name);\n  if( res !== 0) return res;\n  else if (state.agentsTab.parameters.find((el) => el.name === name)) {\n    return 101;\n  }\n  return 0;\n\n}","import React, { useState, useEffect } from \"react\";\nimport { FormControl, Select, MenuItem, TextField, Button, Alert } from \"@mui/material\";\nimport PropTypes from \"prop-types\"\nimport {distributionsDict, validateFloatParam, errorCodes} from \"../../app/utils\"\n\nexport const FloatParam = (props) => {\n\n  const {save} = props\n\n  const [floatType, setFloatType] = useState(\"initVal\");\n  const [initVal, setInitVal] = useState(0);\n  const [distribution, setDistribution] = useState(\n    Object.keys(distributionsDict)[0]\n  );\n  const [distributionArgs, setDistributionArgs] = useState([]);\n  const [paramName, setParamName] = useState(\"\");\n  const [paramData, setParamData] = useState({})\n\n  const [displayError, setDisplayError] = useState(false);\n  const [errorText, setErrorText] = useState(\"\");\n\n  const handleDistributionChange = (distribution) => {\n    let arg_count = distributionsDict[distribution].arg_count;\n    let newArgs = Array(arg_count);\n    newArgs.fill(0);\n    setDistributionArgs(newArgs);\n    setDistribution(distribution);\n    updateParamData();\n  };\n\n  const handleDistributionArgChange = (value, id) => {\n    let index = id.split(\"_\");\n    index = parseInt(index[index.length - 1]);\n    if (!isNaN(index)) {\n      let newArgs = [...distributionArgs];\n      newArgs[index] = value;\n      setDistributionArgs(newArgs);\n    }\n    updateParamData();\n  };\n\n  const handleInitValChange = (value) => {\n    setInitVal(value);\n    updateParamData();\n  }\n\n  const saveButtonClick = () => {\n    let code = validateFloatParam(paramData);\n    if(code !== 0){\n      let error = errorCodes.find((el) => el.code === code);\n      setDisplayError(true);\n      setErrorText(error.info);\n    }else{\n      save(paramData);\n    }\n  }\n\n  const updateParamData = () => {\n    let newParamData = {};\n    newParamData.name = paramName;\n    newParamData.type = floatType;\n    switch (floatType) {\n      case \"initVal\":\n        newParamData.initVal = initVal;\n        break;\n      case \"distribution\":\n        newParamData.distribution = distribution;\n        newParamData.distribution_args = distributionArgs;\n        break;\n      default:\n        break;\n    }\n    setParamData(newParamData);\n  };\n  // I have no idea why this works\n  useEffect(()=>{\n    updateParamData()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [paramName, floatType, distribution, distributionArgs]);\n\n  return (\n    <>\n      <FormControl fullWidth sx={{ marginTop: 2 }}>\n        <TextField\n          variant=\"outlined\"\n          label=\"Name\"\n          id=\"param_name\"\n          value={paramName}\n          onChange={(e) => setParamName(e.target.value)}\n        />\n        <Select\n          value={floatType}\n          onChange={(e) => setFloatType(e.target.value)}\n        >\n          <MenuItem value={\"initVal\"}> Initial Value </MenuItem>\n          <MenuItem value={\"distribution\"}> Draw from distribution </MenuItem>\n        </Select>\n      </FormControl>\n      <FormControl fullWidth sx={{ marginTop: 2 }}>\n        {floatType === \"initVal\" ? (\n          <TextField\n            type=\"number\"\n            id=\"init_val_float\"\n            value={initVal}\n            onChange={(e) => handleInitValChange(e.target.value)}\n          />\n        ) : floatType === \"distribution\" ? (\n          <Select\n            value={distribution}\n            onChange={(e) => handleDistributionChange(e.target.value)}\n          >\n            {Object.keys(distributionsDict).map((key) => {\n              return (\n                <MenuItem key={key} value={key}> {distributionsDict[key].name} </MenuItem>\n              );\n            })}\n          </Select>\n        ) : (\n          <></>\n        )}\n        {floatType === \"distribution\" ? (\n          [...Array(distributionsDict[distribution].arg_count).keys()].map(\n            (key, index) => {\n              return (\n                <TextField\n                  label={distributionsDict[distribution].param_names[index]}\n                  type=\"number\"\n                  value={distributionArgs[index]}\n                  onChange={(e) => {\n                    handleDistributionArgChange(e.target.value, e.target.id);\n                  }}\n                  InputProps={{ inputProps: { step: 0.1 } }}\n                  sx={{ margin: 1 }}\n                  id={distribution + \"_param_\" + index}\n                />\n              );\n            }\n          )\n        ) : (\n          <></>\n        )}\n      </FormControl>\n      {\n        displayError ?\n        <Alert severity=\"error\" onClose={(e) => setDisplayError(false)}> {errorText} </Alert>\n        :\n        <></>\n      }\n      <Button onClick={saveButtonClick}> Add parameter </Button>\n    </>\n  );\n};\n\nFloatParam.propTypes = {\n  save: PropTypes.func.isRequired,\n};\n\nexport default FloatParam;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Paper, TextField, IconButton } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\n\nconst NewEnumVal = (props) => {\n  const { addEnumVal, enumValName, onChangeField, error } = props;\n  return (\n    <Paper component=\"form\" sx={{ display: \"flex\", alignItems: \"center\" }}>\n      <TextField\n        sx={{ ml: 1, flex: 1 }}\n        placeholder=\"Param name\"\n        value={enumValName}\n        onChange={(e) => {\n          onChangeField(e.target.value);\n        }}\n        error={error}\n        helperText={error ? \"Enum values must be non-empty and unique\" : \"\"}\n        id=\"new_enum_val_name\"\n      />\n      <IconButton color=\"primary\" sx={{ p: \"10px\" }} onClick={addEnumVal}>\n        <AddIcon />\n      </IconButton>\n    </Paper>\n  );\n};\n\nNewEnumVal.propTypes = {\n  addEnumVal: PropTypes.func.isRequired,\n  enumValName: PropTypes.string.isRequired,\n  onChangeField: PropTypes.func.isRequired,\n  error: PropTypes.bool.isRequired,\n};\n\nexport default NewEnumVal;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  ListItem,\n  ListItemText,\n  TextField,\n  InputAdornment,\n  IconButton,\n} from \"@mui/material\";\n\nimport RemoveIcon from \"@mui/icons-material/Remove\";\n\nconst EnumVal = (props) => {\n\n  const {enumState, enumVals, name, setPercentage, removeEnumVal, error} = props\n\n  return (\n    <ListItem disablePadding>\n      <ListItemText primary={name} />\n      {enumState === \"percentages\" ? (\n        <TextField\n          value={enumVals.find((el) => el.name === name).percentage}\n          onChange={(e) => setPercentage(props.name, e.target.value)}\n          type={\"number\"}\n          InputProps={{\n            startAdornment: <InputAdornment position=\"start\">%</InputAdornment>,\n            inputProps: {step: 0.1, min: 0, max: 100}\n          }}\n          error={error}\n          sx={{ width: 90 }}\n          id={props.name + \"_percentage\"}\n        />\n      ) : (\n        <></>\n      )}\n      <IconButton\n        color=\"primary\"\n        sx={{ p: \"10px\" }}\n        onClick={(e) => removeEnumVal(props.name)}\n      >\n        <RemoveIcon />\n      </IconButton>\n    </ListItem>\n  );\n};\n\nEnumVal.propTypes = {\n  enumState: PropTypes.string.isRequired,\n  enumVals: PropTypes.array.isRequired,\n  name: PropTypes.string.isRequired,\n  setPercentage: PropTypes.func.isRequired,\n  removeEnumVal: PropTypes.func.isRequired,\n  error: PropTypes.bool.isRequired,\n}\n\nexport default EnumVal;","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport PropTypes from \"prop-types\"\n\nimport {\n  FormControl,\n  Select,\n  MenuItem,\n  RadioGroup,\n  FormControlLabel,\n  Radio,\n  List,\n  TextField,\n  Button,\n  Alert\n} from \"@mui/material\";\n\nimport {selectEnums} from \"./enumSlice\";\n\nimport NewEnumVal from \"./NewEnumVal\";\nimport EnumVal from \"./EnumVal\";\nimport { errorCodes, validateEnumParam } from \"../../app/utils\";\n\nconst EnumParam = (props) => {\n  const {save} = props\n  const [enumType, setEnumType] = useState(\"new\");\n  const [enumState, setEnumState] = useState(\"init\");\n\n  const [selectedExistingEnum, setSelectedExistingEnum] = useState(0);\n  const enums = useSelector(selectEnums);\n\n  const [enumVals, setEnumVals] = useState([]);\n  const [enumValName, setEnumValName] = useState(\"\");\n  const [enumValNameError, setEnumValNameError] = useState(false);\n  const [percentageError, setPrecentageError] = useState(false);\n  const [selectedIndex, setSelectedIndex] = useState(0);\n  const [paramName, setParamName] = useState(\"\");\n  const [paramData, setParamData] = useState({});\n\n  const [displayError, setDisplayError] = useState(false);\n  const [errorText, setErrorText] = useState(\"\");\n\n  const addButtonClick = () => {\n    const code = validateEnumParam(paramData);\n    if(code !== 0){\n      setDisplayError(true);\n      const error = errorCodes.find(el => el.code === code);\n      setErrorText(error.info);\n      return;\n    }else{\n      save(paramData);\n    }\n  }\n\n  const addEnumVal = () => {\n    if (enumVals.some((el) => el.name === enumValName) || enumValName === \"\") {\n      setEnumValNameError(true);\n    } else {\n      const newVal = {\n        name: enumValName,\n        percentage: 0,\n      };\n      setEnumVals((enumVals) => [...enumVals, newVal]);\n      setEnumValName(\"\");\n    }\n    updateParamData();\n  };\n\n  const onEnumValFieldChange = (value) => {\n    setEnumValName(value);\n    setEnumValNameError(false);\n  };\n\n  const removeEnumVal = (name) => {\n    setEnumVals(enumVals.filter((item) => item.name !== name));\n    updateParamData();\n  };\n\n  const setPercentage = (name, percentage) => {\n    let newVals = JSON.parse(JSON.stringify(enumVals));\n    let index = newVals.findIndex((el) => el.name === name);\n    if (index !== -1) {\n      newVals[index].percentage = percentage;\n    }\n    setEnumVals(newVals);\n    let sum = 0;\n    for (let i = 0; i < newVals.length; i++) {\n      sum += parseFloat(newVals[i].percentage);\n    }\n    if (sum !== 100) {\n      setPrecentageError(true);\n    } else {\n      setPrecentageError(false);\n    }\n    updateParamData();\n  };\n\n  const handleEnumStateChange = (value) => {\n    setEnumState(value);\n    updateParamData();\n  };\n\n  const handleSelectionChange = (value) => {\n    setSelectedIndex(value);\n    updateParamData();\n  };\n\n  const updateParamData = () => {\n    let newParamData = {};\n    newParamData.type = enumType;\n    newParamData.name = paramName;\n    switch (enumType) {\n      case \"new\":\n        newParamData.state = enumState;\n        switch (enumState) {\n          case \"init\":\n            let updateVals = [...enumVals];\n            updateVals = updateVals.map((el,index) => {\n              return index === selectedIndex ? {...el, percentage: \"100\"} : el;\n            })\n            newParamData.enumVals = updateVals;\n            break;\n          case \"percentages\":\n            newParamData.enumVals = enumVals;\n            break;\n          default:\n            break;\n        }\n        break;\n      case \"existing\":\n        newParamData.oldEnumData = enums[selectedExistingEnum];\n        break;\n      default:\n        break;\n    }\n    setParamData(newParamData);\n  };\n\n  // I have no idea why this works\n  useEffect(()=>{\n    updateParamData()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [paramName, enumType, enumVals]);\n\n  return (\n    <>\n    <FormControl fullWidth sx={{ marginTop: 2 }}>\n      {enumType === \"new\" ? (\n        <TextField\n          variant=\"outlined\"\n          label=\"Name\"\n          id=\"param_name\"\n          value={paramName}\n          onChange={(e) => setParamName(e.target.value)}\n        />\n      ) : (\n        <></>\n      )}\n      <Select value={enumType} onChange={(e) => setEnumType(e.target.value)}>\n        <MenuItem value={\"new\"}> New enumerable </MenuItem>\n        <MenuItem value={\"existing\"}> Existing enumerable </MenuItem>\n      </Select>\n      {enumType === \"new\" ? (\n        <>\n          <RadioGroup\n            value={enumState}\n            onChange={(e) => handleEnumStateChange(e.target.value)}\n          >\n            <FormControlLabel\n              value=\"init\"\n              control={<Radio />}\n              label=\"Initial state\"\n            />\n            <FormControlLabel\n              value=\"percentages\"\n              control={<Radio />}\n              label=\"Percentages\"\n            />\n          </RadioGroup>\n          {enumState === \"init\" && enumVals.length > 0 ? (\n            <>\n              <Select\n                value={selectedIndex}\n                onChange={(e) => handleSelectionChange(e.target.value)}\n                sx={{ margin: 1 }}\n              >\n                {\" \"}\n                {enumVals.map((key, index) => {\n                  return <MenuItem value={index}> {key.name} </MenuItem>;\n                })}\n              </Select>\n            </>\n          ) : (\n            <></>\n          )}\n          <List>\n            {enumVals.map((key) => {\n              return (\n                <EnumVal\n                  name={key.name}\n                  enumState={enumState}\n                  enumVals={enumVals}\n                  setPercentage={setPercentage}\n                  removeEnumVal={removeEnumVal}\n                  error={percentageError}\n                />\n              );\n            })}\n          </List>\n          <NewEnumVal\n            addEnumVal={addEnumVal}\n            enumValName={enumValName}\n            onChangeField={onEnumValFieldChange}\n            error={enumValNameError}\n          />\n        </>\n      ) : enumType === \"existing\" ? (\n        <>\n        <Select\n          value={selectedExistingEnum}\n          onChange={(e) => setSelectedExistingEnum(e.target.value)}\n          sx={{ margin: 1 }}\n        >\n          {\n            enums.map((key,index)=> {\n              return <MenuItem value={index}> {key.name} </MenuItem>;\n            })\n          }\n\n        </Select>\n        </>\n      ) : (\n        <></>\n      )}\n    </FormControl>\n    {\n      displayError ?\n      <Alert severity=\"error\" onClose={(e) => setDisplayError(false)}> {errorText} </Alert>\n      :\n      <></>\n    }\n    <Button onClick={addButtonClick}> Add parameter </Button>\n    </>\n  );\n};\n\nEnumParam.propTypes = {\n  save: PropTypes.func.isRequired,\n};\n\nexport default EnumParam;\n","import React, { useState, useEffect } from \"react\";\nimport { FormControl, Select, MenuItem, TextField, Button, Alert } from \"@mui/material\"\nimport PropTypes from \"prop-types\"\nimport { errorCodes, validateListParam } from \"../../app/utils\";\n\nexport const ListParam = (props) => {\n  const {save} = props\n  const [listType, setListType] = useState(\"conns\");\n  const [paramName, setParamName] = useState(\"\");\n  const [paramData, setParamData] = useState({})\n\n  const [displayError, setDisplayError] = useState(false)\n  const [errorText, setErrorText] = useState(\"\");\n\n  const addButtonClick = () => {\n    const code = validateListParam(paramData);\n    if(code !==0){\n      setDisplayError(true);\n      const error = errorCodes.find(el => el.code === code)\n      setErrorText(error.info);\n    }else{\n      save(paramData);\n    }\n  }\n\n  const handleTypeChange = (value) => {\n    setListType(value);\n    updateParamData();\n  }\n\n  const updateParamData = () => {\n    let newParamData = {};\n    newParamData.type = listType;\n    newParamData.name = paramName;\n    setParamData(newParamData);\n  }\n\n  // I have no idea why this works\n  useEffect(()=>{\n    updateParamData()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [paramName, listType]);\n\n  return (\n    <>\n    <FormControl fullWidth xd={{ marginTop: 2}}>\n        <TextField\n          variant=\"outlined\"\n          label=\"Name\"\n          id=\"param_name\"\n          value={paramName}\n          onChange={(e) => setParamName(e.target.value)}\n        />\n      <Select\n        value={listType}\n        onChange={(e) => handleTypeChange(e.target.value)}\n      >\n        <MenuItem value={\"conns\"}> Connections </MenuItem>\n        <MenuItem value={\"msgs\"}> Messages </MenuItem>\n      </Select>\n    </FormControl>\n    {\n      displayError ?\n      <Alert severity=\"error\" onClose={(e) => setDisplayError(false)}> {errorText} </Alert>\n      :\n      <></>\n    }\n    <Button onClick={addButtonClick}> Add parameter </Button>\n    </>\n  );\n}\n\nListParam.propTypes = {\n  save: PropTypes.func.isRequired,\n};\n\nexport default ListParam;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Dialog from \"@mui/material/Dialog\";\nimport { Container } from \"@mui/material\";\nimport {distributionsDict} from \"../../app/utils\"\nimport FloatParam from \"./FloatParam\";\nimport EnumParam from \"./EnumParam\";\nimport ListParam from \"./ListParam\";\nimport {useDispatch} from \"react-redux\"\nimport {addEnum} from \"./enumSlice\";\n\n\nfunction ParamsDialog(props) {\n  const dispatch = useDispatch()\n  const { onClose, open, type, addParam} = props;\n\n\n  const handleClose = (event, reason) => {\n    onClose(false);\n  };\n\n  const createParam = (paramData) => {\n    let param = {};\n    param.name = paramData.name;\n    if(param.name === \"\" && paramData.type !== \"existing\") return null;\n    switch(paramData.type){\n      case \"initVal\":\n        param.type = \"float\"; //old: float_init\n        param.mode = \"init\"\n        let val = parseFloat(paramData.initVal);\n        if(isNaN(val)){\n          return null;\n        }\n        param.value = paramData.initVal;\n        return param;\n      case \"distribution\":\n        param.type = \"float\"\n        param.mode = \"distribution\" //old: float_distribution\n        param.distribution = paramData.distribution;\n        for(let i=0; i<distributionsDict[param.distribution].arg_count; i++){\n          if(isNaN(parseFloat(paramData.distribution_args[i]))){\n            return null;\n          }\n        }\n        param.distribution_args = paramData.distribution_args;\n        return param;\n      case \"new\":\n        param.state = paramData.state;\n        switch(paramData.state){\n          case \"init\":\n            param.type = \"enum\"; //old: enum_new_init\n            param.mode = \"new_init\";\n            param.values = paramData.enumVals;\n            let val = parseFloat(paramData.selectedInit);\n            if(param.values.length < 2){\n              return null;\n            }\n            if(val < 0 || val >= param.values.length){\n              return null;\n            }\n            param.selectedInit = paramData.selectedInit;\n            return param;\n          case \"percentages\":\n            param.type = \"enum\"; //old: enum_new_percentages\n            param.mode = \"new_percentages\";\n            param.values = paramData.enumVals;\n            let sum = 0;\n            for(let i=0; i<param.values.length; i++){\n              sum += parseFloat(param.values[i].percentage);\n            }\n            if(sum !== 100){\n              return null;\n            }\n            return param;\n          default:\n            return null;\n        }\n      case \"existing\":\n        param.name = paramData.oldEnumData.name;\n        switch(paramData.oldEnumData.state){\n          case \"init\":\n            param.type = \"enum\"; //old: enum_existing_init\n            param.mode = \"existing_init\";\n            param.values = paramData.oldEnumData.values;\n            param.selectedInit = paramData.oldEnumData.selectedInit;\n            return param;\n          case \"percentages\":\n            param.type = \"enum\" //old: enum_existing_percentages\n            param.mode = \"exiting_percentages\";\n            param.values = paramData.oldEnumData.values;\n            return param;\n          default: return null;\n        }\n      case \"conns\":\n        param.type = \"list\"\n        param.mode = \"conn\"\n        return param;\n      case \"msgs\":\n        param.type = \"list\"\n        param.mode = \"msg\"\n        return param;\n      default:\n        return null;\n    }\n  }\n\n  const save = (paramData) => {\n    let paramCandidate = createParam(paramData);\n    if(paramCandidate == null){\n      onClose(true)\n\n    }else{\n      dispatch(addParam(paramCandidate))\n      if(paramData.type === \"new\"){\n        dispatch(addEnum(paramCandidate))\n      }\n\n      onClose(false)\n    }\n  }\n\n  const ModeDisplay = () => {\n    switch (type) {\n      case \"float\":\n        return <FloatParam save={save}/>;\n      case \"enum\":\n        return <EnumParam save={save}/>;\n      case \"list\":\n        return <ListParam save={save}/>;\n      default:\n        return <></>;\n    }\n  };\n\n  return (\n    <Dialog\n      onClose={handleClose}\n      open={open}\n      disableAutoFocus={true}\n      disableEnforceFocus={true}\n      fullWidth\n      maxWidth=\"md\"\n    >\n      <Container sx={{ padding: 3 }}>\n        <DialogTitle> New parameter </DialogTitle>\n        <ModeDisplay />\n      </Container>\n    </Dialog>\n  );\n}\n\nParamsDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  addParam: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nexport default ParamsDialog;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n Stack,\n Autocomplete,\n TextField,\n Select,\n MenuItem,\n IconButton\n} from \"@mui/material\"\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\n\nconst FloatExprOps = [\n  { opcode: \"ADD \", label: \"+=\" },\n  { opcode: \"SUBT\", label: \"-=\" },\n  { opcode: \"MULT\", label: \"*=\" },\n  { opcode: \"DIV \", label: \"/=\" },\n];\n\nexport const ExprStatement = (props) => {\n\n  const { save, setEditOn, lhsCandidates, rhsCandidates} = props;\n\n  const [curLhs, setCurLhs] = useState(\"\");\n  const [lhsError, setLhsError] = useState(false);\n  const [curRhs, setCurRhs] = useState(\"\");\n  const [rhsError, setRhsError] = useState(false);\n  const [curOpCode, setCurOpCode] = useState(FloatExprOps[0].opcode);\n\n  const handleLhsChange = (value) => {\n    setCurLhs(value);\n  };\n\n  const handleRhsChange = (value) => {\n    setCurRhs(value);\n  };\n\n\n  const addExprStatement = () => {\n    //validate LHS\n    let err_flag = false;\n    if (lhsCandidates.findIndex((el) => el.name === curLhs) === -1) {\n      setLhsError(true);\n      err_flag = true;\n    }\n    //validate RHS\n    if (\n      rhsCandidates.findIndex((el) => el.name === curRhs) === -1 &&\n      isNaN(parseFloat(curRhs))\n    ) {\n      setRhsError(true);\n      err_flag = true;\n    }\n    if (!err_flag) {\n      let statement =\n        curLhs +\n        \" \" +\n        FloatExprOps.find((el) => el.opcode === curOpCode).label +\n        \" \" +\n        curRhs;\n      let operation = curOpCode + \"    \" + curLhs + \",\" + curRhs;\n      save(statement, operation);\n      setEditOn(false);\n      setLhsError(false);\n      setRhsError(false);\n    }\n  };\n\n  return (\n    <Stack direction=\"row\">\n      <Autocomplete\n        freeSolo\n        options={lhsCandidates.map((el,index)=> el===undefined ? \"\" : el.name)}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{ width: \"200px\" }}\n        error={lhsError}\n        value={curLhs}\n        inputValue={curLhs}\n        onInputChange={(event, value) => handleLhsChange(value)}\n        helperText=\"LHS must be a valid property\"\n      />\n      <Select value={curOpCode} onChange={(e) => setCurOpCode(e.target.value)}>\n        {FloatExprOps.map((op, index) => {\n          return <MenuItem value={op.opcode}> {op.label} </MenuItem>;\n        })}\n      </Select>\n      <Autocomplete\n        freeSolo\n        options={rhsCandidates.map((el,index)=>el.name)}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{ width: \"200px\" }}\n        error={rhsError}\n        value={curRhs}\n        inputValue={curRhs}\n        onInputChange={(event, value) => handleRhsChange(value)}\n        helperText=\"RHS must be a valid property or a number\"\n      />\n      <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addExprStatement}>\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n    </Stack>\n  );\n};\n\nExprStatement.propTypes = {\n  save: PropTypes.func.isRequired,\n  setEditOn: PropTypes.func.isRequired,\n  lhsCandidates: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    type: PropTypes.string\n  })).isRequired,\n  rhsCandidates: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    type: PropTypes.string\n  })).isRequired,\n}\n\n\nexport default ExprStatement;\n","import React from 'react'\n\nimport {Box} from \"@mui/material\"\n\nexport const InlineText = (props) => {\n  return (\n    <Box\n      sx={{width: \"70px\", textAlign: \"center\", verticalAlign: \"middle\", p: \"15px\"}}\n    >\n      {props.text}\n    </Box>\n\n  );\n}\n\nexport default InlineText;","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\"\nimport {\n  Stack,\n  Autocomplete,\n  TextField,\n  IconButton,\n} from \"@mui/material\"\n\nimport { useDispatch } from \"react-redux\";\nimport { addScopeVar } from \"../editorSlice\";\n\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport InlineText from \"../InlineText\";\n\nexport const DeclStatement = (props) => {\n\n  const { save, setEditOn, variables } = props;\n\n  const dispatch = useDispatch();\n\n  const typeLookup = ( name ) => {\n    let variable = variables.find(el => el.name === name);\n    if(variable){\n      return variable.type;\n    }else{\n      return \"\";\n    }\n  }\n\n  const handleLhsChange = (value) => {\n    setCurLhs(value);\n  };\n\n  const handleRhsChange = (value) => {\n    setCurRhs(value);\n  };\n\n  const [curLhs, setCurLhs] = useState(\"\");\n  const [lhsError, setLhsError] = useState(false);\n  const [curRhs, setCurRhs] = useState(\"\");\n  const [rhsError, setRhsError] = useState(false);\n\n  const addDeclStatement = () => {\n    //validate LHS\n    let err_flag = false;\n    if (variables.findIndex((el) => el.name === curLhs) !== -1) {\n      setLhsError(true);\n      err_flag = true;\n    }\n    //validate RHS\n    if (\n      variables.findIndex((el) => el.name === curRhs) === -1 &&\n      isNaN(parseFloat(curRhs))\n    ) {\n      setRhsError(true);\n      err_flag = true;\n    }\n    if (!err_flag) {\n      if(isNaN(parseFloat(curRhs))){\n        dispatch(addScopeVar({\n          name: curLhs,\n          type: typeLookup(curRhs)\n        }))\n      }else{\n        dispatch(addScopeVar({\n          name: curLhs,\n          type: \"float\"\n        }))\n\n      }\n      let statement = \"let \" + curLhs + \" = \" + curRhs;\n      let operation = \"DECL    \" + curLhs + \",\" + curRhs;\n      save(statement, operation);\n      setEditOn(false);\n    }\n  };\n\n  return (\n    <Stack direction=\"row\">\n      <InlineText text=\"Let: \" />\n      <TextField\n        value={curLhs}\n        onChange={(e) => handleLhsChange(e.target.value)}\n        error={lhsError}\n        helperText=\"LHS must be a new identifier\"\n      />\n      <InlineText text=\" = \" />\n      <Autocomplete\n        freeSolo\n        options={variables.map((key, index) => key.name)}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{ width: \"200px\" }}\n        error={rhsError}\n        value={curRhs}\n        inputValue={curRhs}\n        onInputChange={(event, value) => handleRhsChange(value)}\n        helperText=\"RHS must be a valid property or a number\"\n      />\n\n      <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addDeclStatement}>\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n    </Stack>\n  );\n};\n\nDeclStatement.propTypes = {\n  save: PropTypes.func.isRequired,\n  setEditOn: PropTypes.func.isRequired,\n  variables: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    type: PropTypes.string\n  })).isRequired,\n}\n\nexport default DeclStatement;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Stack,\n  Autocomplete,\n  MenuItem,\n  IconButton,\n  TextField,\n  Select,\n} from \"@mui/material\"\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\n\n\nimport { useDispatch } from \"react-redux\";\nimport {\n  openBlock\n} from \"../editorSlice\";\n\nconst FloatCondOps = [\n  { opcode: \"ILT  \", label: \"<\" },\n  { opcode: \"IGT  \", label: \">\" },\n  { opcode: \"ILTE \", label: \">=\" },\n  { opcode: \"IGTE \", label: \">=\" },\n  { opcode: \"IEQ  \", label: \"==\" },\n  { opcode: \"INEQ \", label: \"!=\" },\n];\n\nexport const CondFloatStatement = (props) => {\n  const { save, setEditOn, variables } = props;\n  const dispatch = useDispatch();\n\n  const [curLhs, setCurLhs] = useState(\"\");\n  const [lhsError, setLhsError] = useState(false);\n  const [curRhs, setCurRhs] = useState(\"\");\n  const [rhsError, setRhsError] = useState(false);\n  const [curOpCode, setCurOpCode] = useState(FloatCondOps[0].opcode);\n\n\n  const handleLhsChange = (value) => {\n    setCurLhs(value);\n  };\n\n  const handleRhsChange = (value) => {\n    setCurRhs(value);\n  };\n\n  const addCondStatement = () => {\n    let err_flag = false;\n    if (\n      variables.findIndex((el) => el.name === curLhs) === -1 &&\n      isNaN(parseFloat(curLhs))\n    ) {\n      setLhsError(true);\n      err_flag = true;\n    }\n    if (\n      variables.findIndex((el) => el.name === curRhs) === -1 &&\n      isNaN(parseFloat(curRhs))\n    ) {\n      setRhsError(true);\n      err_flag = true;\n    }\n    if (!err_flag) {\n      let statement =\n        \"If \" +\n        curLhs +\n        \" \" +\n        FloatCondOps.find((el) => el.opcode === curOpCode).label +\n        \" \" +\n        curRhs;\n      let operation = curOpCode + \"    \" + curLhs + \",\" + curRhs;\n      dispatch(openBlock());\n      save(statement, operation);\n      setEditOn(false);\n      setLhsError(false);\n      setRhsError(false);\n    }\n  };\n\n  return (\n    <Stack direction=\"row\">\n      <Autocomplete\n        freeSolo\n        options={variables.map((el,index)=>el.name)}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{ width: \"200px\" }}\n        error={lhsError}\n        value={curLhs}\n        inputValue={curLhs}\n        onInputChange={(event, value) => handleLhsChange(value)}\n        helperText=\"LHS must be a valid variable or a number\"\n      />\n      <Select value={curOpCode} onChange={(e) => setCurOpCode(e.target.value)}>\n        {FloatCondOps.map((op, index) => {\n          return <MenuItem value={op.opcode}> {op.label} </MenuItem>;\n        })}\n      </Select>\n      <Autocomplete\n        freeSolo\n        options={variables.map((el,index)=>el.name)}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{ width: \"200px\" }}\n        error={rhsError}\n        value={curRhs}\n        inputValue={curRhs}\n        onInputChange={(event, value) => handleRhsChange(value)}\n        helperText=\"RHS must be a valid variable or a number\"\n      />\n      <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addCondStatement}>\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n    </Stack>\n  );\n};\n\nCondFloatStatement.propTypes = {\n  save: PropTypes.func.isRequired,\n  setEditOn: PropTypes.func.isRequired,\n  variables: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    type: PropTypes.string,\n  })).isRequired,\n}\n\nexport default CondFloatStatement;\n","import React, { useState} from \"react\"\nimport PropTypes from \"prop-types\";\nimport {\n  Stack,\n  Autocomplete,\n  Select,\n  MenuItem,\n  TextField,\n  IconButton,\n} from \"@mui/material\"\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\n\n\nimport { useDispatch } from \"react-redux\";\nimport {\n  openBlock\n} from \"../editorSlice\";\n\nconst EnumCondOps = [\n  { opcode: \"IEQ \", label: \"==\" },\n  { opcode: \"INEQ\", label: \"!=\" },\n];\n\n\nexport const CondEnumStatement = (props) => {\n  const {save, setEditOn, variables} = props;\n  const dispatch = useDispatch();\n\n  const [curLhs, setCurLhs] = useState(\"\");\n  const [lhsError, setLhsError] = useState(false);\n  const [curRhs, setCurRhs] = useState(\"\");\n  const [rhsError, setRhsError] = useState(false);\n  const [curOpCode, setCurOpCode] = useState(EnumCondOps[0].opcode);\n\n  const [rhsCandidates, setRhsCandidates] = useState([]);\n\n  const handleLhsChange = (value) => {\n    setCurLhs(value);\n    let val = variables.find(el => el.name === value);\n    setRhsCandidates(val.values.map((el,index)=>el.name));\n  };\n\n  const handleRhsChange = (value) => {\n    setCurRhs(value);\n  };\n\n  const addCondStatement = () => {\n    let err_flag = false;\n    if (\n      variables.findIndex((el) => el.name === curLhs) === -1 &&\n      isNaN(parseFloat(curLhs))\n    ) {\n      setLhsError(true);\n      err_flag = true;\n    }\n    if (\n      rhsCandidates.findIndex((el) => el === curRhs) === -1 &&\n      isNaN(parseFloat(curRhs))\n    ) {\n      setRhsError(true);\n      err_flag = true;\n    }\n    if (!err_flag) {\n      let statement =\n        \"If \" +\n        curLhs +\n        \" \" +\n        EnumCondOps.find((el) => el.opcode === curOpCode).label +\n        \" \" +\n        curRhs;\n      let operation = curOpCode + \"    \" + curLhs + \",\" + curRhs;\n      dispatch(openBlock());\n      save(statement, operation);\n      setEditOn(false);\n      setLhsError(false);\n      setRhsError(false);\n    }\n  };\n\n  return (\n    <Stack direction=\"row\">\n      <Autocomplete\n        freeSolo\n        options={variables.map((el,index)=>el.name)}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{ width: \"200px\" }}\n        error={lhsError}\n        value={curLhs}\n        inputValue={curLhs}\n        onInputChange={(event, value) => handleLhsChange(value)}\n        helperText=\"LHS must be a valid variable or a number\"\n      />\n      <Select value={curOpCode} onChange={(e) => setCurOpCode(e.target.value)}>\n        {EnumCondOps.map((op, index) => {\n          return <MenuItem value={op.opcode}> {op.label} </MenuItem>;\n        })}\n      </Select>\n      <Autocomplete\n        freeSolo\n        options={rhsCandidates}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{ width: \"200px\" }}\n        error={rhsError}\n        value={curRhs}\n        inputValue={curRhs}\n        disabled={curLhs === \"\"}\n        onInputChange={(event, value) => handleRhsChange(value)}\n        helperText=\"RHS must be a valid variable or a number\"\n      />\n      <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addCondStatement}>\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n    </Stack>\n  );\n\n}\n\nCondEnumStatement.propTypes = {\n  save: PropTypes.func.isRequired,\n  setEditOn: PropTypes.func.isRequired,\n  variables: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    type: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    }))\n  })).isRequired,\n}\n\nexport default CondEnumStatement;","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  Stack,\n  IconButton\n} from \"@mui/material\";\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\n\nimport InlineText from \"../InlineText\";\n\n\nimport { useDispatch } from \"react-redux\";\nimport {\n  closeBlock\n} from \"../editorSlice\";\n\nexport const EndBlockStatement = (props) => {\n\n  const {save} = props\n  const dispatch = useDispatch();\n\n  const addEndCondStatement = () => {\n    let statement = \"End block\";\n    let operation = \"EBLOCK\";\n    dispatch(closeBlock());\n    save(statement, operation);\n  };\n\n  return (\n    <Stack direction=\"row\">\n      <InlineText text=\"End conditional block\" />\n      <IconButton\n        sx={{ p: \"10px\" }}\n        color=\"primary\"\n        onClick={addEndCondStatement}\n      >\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n    </Stack>\n  );\n};\n\nEndBlockStatement.propTypes = {\n  save: PropTypes.func.isRequired,\n}\n\nexport default EndBlockStatement;\n","import React, { useState} from \"react\"\nimport PropTypes from \"prop-types\";\nimport {\n  Stack,\n  Autocomplete,\n  Select,\n  MenuItem,\n  TextField,\n  IconButton,\n} from \"@mui/material\"\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\n\n\nimport { useDispatch } from \"react-redux\";\nimport {\n  openBlock\n} from \"../editorSlice\";\n\n\nconst EnumCondOps = [\n  { opcode: \"WEQ  \", label: \"==\" },\n  { opcode: \"WNEQ \", label: \"!=\" },\n];\n\n\nexport const WhileEnumStatement = (props) => {\n  const {save, setEditOn, variables} = props;\n  const dispatch = useDispatch();\n\n  const [curLhs, setCurLhs] = useState(\"\");\n  const [lhsError, setLhsError] = useState(false);\n  const [curRhs, setCurRhs] = useState(\"\");\n  const [rhsError, setRhsError] = useState(false);\n  const [curOpCode, setCurOpCode] = useState(EnumCondOps[0].opcode);\n\n  const [rhsCandidates, setRhsCandidates] = useState([]);\n\n  const handleLhsChange = (value) => {\n    setCurLhs(value);\n    let val = variables.find(el => el.name === value);\n    setRhsCandidates(val.values.map((el,index)=>el.name));\n  };\n\n  const handleRhsChange = (value) => {\n    setCurRhs(value);\n  };\n\n  const addCondStatement = () => {\n    let err_flag = false;\n    if (\n      variables.findIndex((el) => el.name === curLhs) === -1 &&\n      isNaN(parseFloat(curLhs))\n    ) {\n      setLhsError(true);\n      err_flag = true;\n    }\n    if (\n      rhsCandidates.findIndex((el) => el === curRhs) === -1 &&\n      isNaN(parseFloat(curRhs))\n    ) {\n      setRhsError(true);\n      err_flag = true;\n    }\n    if (!err_flag) {\n      let statement =\n        \"While \" +\n        curLhs +\n        \" \" +\n        EnumCondOps.find((el) => el.opcode === curOpCode).label +\n        \" \" +\n        curRhs +\n        \" do:\";\n      let operation = curOpCode + \"    \" + curLhs + \",\" + curRhs;\n      dispatch(openBlock());\n      save(statement, operation);\n      setEditOn(false);\n      setLhsError(false);\n      setRhsError(false);\n    }\n  };\n\n  return (\n    <Stack direction=\"row\">\n      <Autocomplete\n        freeSolo\n        options={variables.map((el,index)=>el.name)}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{ width: \"200px\" }}\n        error={lhsError}\n        value={curLhs}\n        inputValue={curLhs}\n        onInputChange={(event, value) => handleLhsChange(value)}\n        helperText=\"LHS must be a valid variable or a number\"\n      />\n      <Select value={curOpCode} onChange={(e) => setCurOpCode(e.target.value)}>\n        {EnumCondOps.map((op, index) => {\n          return <MenuItem value={op.opcode}> {op.label} </MenuItem>;\n        })}\n      </Select>\n      <Autocomplete\n        freeSolo\n        options={rhsCandidates}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{ width: \"200px\" }}\n        error={rhsError}\n        value={curRhs}\n        inputValue={curRhs}\n        disabled={curLhs === \"\"}\n        onInputChange={(event, value) => handleRhsChange(value)}\n        helperText=\"RHS must be a valid variable or a number\"\n      />\n      <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addCondStatement}>\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n    </Stack>\n  );\n\n}\n\nWhileEnumStatement.propTypes = {\n  save: PropTypes.func.isRequired,\n  setEditOn: PropTypes.func.isRequired,\n  variables: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    type: PropTypes.string,\n  })).isRequired,\n}\n\nexport default WhileEnumStatement;","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport {\n  Stack,\n  Autocomplete,\n  MenuItem,\n  IconButton,\n  TextField,\n  Select,\n} from \"@mui/material\"\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\n\nimport { useDispatch } from \"react-redux\";\nimport {\n  openBlock\n} from \"../editorSlice\";\n\nconst FloatCondOps = [\n  { opcode: \"WLT  \", label: \"<\" },\n  { opcode: \"WGT  \", label: \">\" },\n  { opcode: \"WLTE \", label: \">=\" },\n  { opcode: \"WGTE \", label: \">=\" },\n  { opcode: \"WEQ  \", label: \"==\" },\n  { opcode: \"WNEQ \", label: \"!=\" },\n];\n\nexport const WhileFloatStatement = (props) => {\n  const { save, setEditOn, variables } = props;\n  const dispatch = useDispatch();\n\n  const [curLhs, setCurLhs] = useState(\"\");\n  const [lhsError, setLhsError] = useState(false);\n  const [curRhs, setCurRhs] = useState(\"\");\n  const [rhsError, setRhsError] = useState(false);\n  const [curOpCode, setCurOpCode] = useState(FloatCondOps[0].opcode);\n\n\n  const handleLhsChange = (value) => {\n    setCurLhs(value);\n  };\n\n  const handleRhsChange = (value) => {\n    setCurRhs(value);\n  };\n\n  const addCondStatement = () => {\n    let err_flag = false;\n    if (\n      variables.findIndex((el) => el.name === curLhs) === -1 &&\n      isNaN(parseFloat(curLhs))\n    ) {\n      setLhsError(true);\n      err_flag = true;\n    }\n    if (\n      variables.findIndex((el) => el.name === curRhs) === -1 &&\n      isNaN(parseFloat(curRhs))\n    ) {\n      setRhsError(true);\n      err_flag = true;\n    }\n    if (!err_flag) {\n      let statement =\n        \"While \" +\n        curLhs +\n        \" \" +\n        FloatCondOps.find((el) => el.opcode === curOpCode).label +\n        \" \" +\n        curRhs +\n        \" do:\";\n      let operation = curOpCode + \"    \" + curLhs + \",\" + curRhs;\n      dispatch(openBlock());\n      save(statement, operation);\n      setEditOn(false);\n      setLhsError(false);\n      setRhsError(false);\n    }\n  };\n\n  return (\n    <Stack direction=\"row\">\n      <Autocomplete\n        freeSolo\n        options={variables.map((el,index)=>el.name)}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{ width: \"200px\" }}\n        error={lhsError}\n        value={curLhs}\n        inputValue={curLhs}\n        onInputChange={(event, value) => handleLhsChange(value)}\n        helperText=\"LHS must be a valid variable or a number\"\n      />\n      <Select value={curOpCode} onChange={(e) => setCurOpCode(e.target.value)}>\n        {FloatCondOps.map((op, index) => {\n          return <MenuItem value={op.opcode}> {op.label} </MenuItem>;\n        })}\n      </Select>\n      <Autocomplete\n        freeSolo\n        options={variables.map((el,index)=>el.name)}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{ width: \"200px\" }}\n        error={rhsError}\n        value={curRhs}\n        inputValue={curRhs}\n        onInputChange={(event, value) => handleRhsChange(value)}\n        helperText=\"RHS must be a valid variable or a number\"\n      />\n      <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addCondStatement}>\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n    </Stack>\n  );\n};\n\nWhileFloatStatement.propTypes = {\n  save: PropTypes.func.isRequired,\n  setEditOn: PropTypes.func.isRequired,\n  mode: PropTypes.string.isRequired,\n  variables: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    type: PropTypes.string,\n  })).isRequired,\n}\n\nexport default WhileFloatStatement;\n","import React, { useState } from \"react\"\nimport PropTypes from \"prop-types\"\nimport {\n  Stack,\n  Select,\n  MenuItem,\n  Autocomplete,\n  TextField,\n  IconButton,\n} from \"@mui/material\"\n\nimport InlineText from \"../InlineText\"\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\n\n\nexport const AssignFloatStatement = (props) => {\n\n  const { lhsCandidates, rhsCandidates, save, setEditOn } = props;\n\n  const [curLhs, setCurLhs] = useState(lhsCandidates[0] === undefined ? \"\" : lhsCandidates[0].name);\n  const [curRhs, setCurRhs] = useState(\"\");\n\n  const [rhsError, setRhsError] = useState(false);\n\n  const handleRhsChange = (value) => {\n    setCurRhs(value);\n  };\n\n  const addAssignStatement = () => {\n    //LHS is select no need to validate\n    //validate RHS\n    let err_flag = false;\n    if (\n      rhsCandidates.findIndex((el) => el.name === curRhs) === -1 &&\n      isNaN(parseFloat(curRhs))\n    ){\n      setRhsError(true);\n      err_flag = true;\n    }\n    if(!err_flag){\n      let statement = curLhs + \" = \" + curRhs;\n      let operation = \"SET     \" + curLhs + \",\" + curRhs;\n      save(statement, operation);\n      setEditOn(false);\n      setRhsError(false);\n    }\n  }\n\n  return (\n    <Stack direction=\"row\">\n      <Select\n        value={curLhs}\n        onChange = {(e) => setCurLhs(e.target.value)}\n      >\n        {\n          lhsCandidates.map((el, index)=>{\n            if(el === undefined) return <></>;\n            return <MenuItem value={el.name}> {el.name} ({el.type}) </MenuItem>;\n          })\n        }\n\n      </Select>\n      <InlineText text=\"=\"/>\n      <Autocomplete\n        freeSolo\n        options={rhsCandidates.map((el,index)=>el.name)}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{width: \"200px\"}}\n        value={curRhs}\n        inputValue = {curRhs}\n        onInputChange = {(event, value) => handleRhsChange(value)}\n        error={rhsError}\n      />\n      <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addAssignStatement}>\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n\n    </Stack>\n  );\n}\n\nAssignFloatStatement.propTypes = {\n  save: PropTypes.func.isRequired,\n  setEditOn: PropTypes.func.isRequired,\n  lhsCandidates: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    type: PropTypes.string\n  })).isRequired,\n  rhsCandidates: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    type: PropTypes.string\n  })).isRequired,\n}\n\nexport default AssignFloatStatement;","import React, {useState} from \"react\"\n\nimport {\n  Stack,\n  Select,\n  MenuItem,\n  IconButton,\n} from \"@mui/material\"\n\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\"\n\nconst ListCondOps = [\n  { opcode: \"IN  \", label: \"in\"},\n  { opcode: \"NIN \", label: \"not in\"},\n]\n\nexport const CondListStatement = (props) => {\n  const {save, setEditOn, lhsCandidates, rhsCandidates} = props;\n\n  const [curLhs, setCurLhs] = useState(\"\")\n  const [curRhs, setCurRhs] = useState(\"\")\n  const [curOpCode, setCurOpCode] = useState(ListCondOps[0].opcode);\n\n  const addCondStatement = () => {\n    if(curLhs !== \"\" && curRhs !== \"\"){\n      let op = ListCondOps.find(el => el.opcode === curOpCode)\n      let statement = \"If \" + curLhs + \" \" + op.label + \" \" + curRhs;\n      let operation = op.opcode + curRhs + \",\" + curLhs;\n      save(statement, operation);\n      setEditOn(false);\n    }\n  }\n\n  return (\n    <Stack direction=\"row\">\n      <Select\n        value={curLhs}\n        onChange={(e) => setCurLhs(e.target.value)}\n      >\n        {\n          lhsCandidates.map((el,index) =>{\n            return <MenuItem value={el.name}>  {el.name} ({el.type}) </MenuItem>\n          })\n        }\n\n\n      </Select>\n      <Select value={curOpCode} onChange={(e) => setCurOpCode(e.target.value)}>\n        {ListCondOps.map((op, index) => {\n          return <MenuItem value={op.opcode}> {op.label} </MenuItem>;\n        })}\n      </Select>\n      <Select\n        value={curRhs}\n        onChange={(e) => setCurRhs(e.target.value)}\n      >\n        {\n          rhsCandidates.map((el,index) =>{\n            return <MenuItem value={el.name}>  {el.name} ({el.type}) </MenuItem>\n          })\n        }\n\n      </Select>\n      <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addCondStatement}>\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n\n    </Stack>\n  );\n\n\n}\n\nexport default CondListStatement;","import React, {useState, useEffect } from 'react'\n\nimport {\n  Stack,\n  Select,\n  MenuItem,\n  IconButton,\n} from \"@mui/material\"\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\"\nimport InlineText from '../InlineText'\n\nexport const AddElemStatement = (props) => {\n  const {save, setEditOn, lhsCandidates, rhsCandidates} = props;\n  const [curLhs, setCurLhs] = useState(lhsCandidates[0] === undefined ? \"\" : lhsCandidates[0].name);\n  const [curRhs, setCurRhs] = useState(\"\");\n  const [rhsOptions, setRhsOptions] = useState([]);\n\n  useEffect(()=>{\n    let found = lhsCandidates.find((el) => el.name === curLhs);\n    if(found !== undefined){\n      let tmpArr = [];\n      switch(found.type){\n        case \"conn\":\n          tmpArr = rhsCandidates.filter((el) => el.type === \"jid\");\n          setRhsOptions(tmpArr);\n          break;\n        case \"msg\":\n          tmpArr = rhsCandidates.filter((el) => el.type === \"msg\");\n          setRhsOptions(tmpArr);\n          break;\n        default:\n          break;\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [curLhs]);\n\n  const addAddStatement = () => {\n    //both selects no need for validation\n    let statement = \"Add \" + curRhs + \"to\" + curLhs;\n    let operation = \"ADDE    \" + curLhs + \",\" + curRhs;\n    save(statement, operation);\n    setEditOn(false);\n  }\n\n  return (\n    <Stack direction=\"row\">\n        <InlineText text=\"To \"/>\n        <Select\n          value={curLhs}\n          onChange = {(e) => setCurLhs(e.target.value)}\n        >\n        {\n          lhsCandidates.map((el, index) => {\n            if(el === undefined) return <></>;\n            return <MenuItem value={el.name}> {el.name} ({el.type}) </MenuItem>;\n          })\n        }\n        </Select>\n        <InlineText text=\"add\"/>\n        <Select\n          value={curRhs}\n          onChange = {(e) => setCurRhs(e.target.value)}\n        >\n          {\n            rhsOptions.map((el, index) => {\n              if(el === undefined) return <></>;\n              return <MenuItem value={el.name}> {el.name} ({el.type}) </MenuItem>\n            })\n          }\n        </Select>\n        <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addAddStatement}>\n          <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n        </IconButton>\n    </Stack>\n\n  );\n}\n\nexport default AddElemStatement;","import React, {useState, useEffect } from 'react'\n\nimport {\n  Stack,\n  Select,\n  MenuItem,\n  IconButton,\n} from \"@mui/material\"\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\"\nimport InlineText from '../InlineText'\n\nexport const RemElemStatement = (props) => {\n  const {save, setEditOn, lhsCandidates, rhsCandidates} = props;\n  const [curLhs, setCurLhs] = useState(lhsCandidates[0] === undefined ? \"\" : lhsCandidates[0].name);\n  const [curRhs, setCurRhs] = useState(\"\");\n  const [rhsOptions, setRhsOptions] = useState([]);\n\n  useEffect(()=>{\n    let found = lhsCandidates.find((el) => el.name === curLhs);\n    if(found !== undefined){\n      let tmpArr = [];\n      switch(found.type){\n        case \"conn\":\n          tmpArr = rhsCandidates.filter((el) => el.type === \"jid\");\n          setRhsOptions(tmpArr);\n          break;\n        case \"msg\":\n          tmpArr = rhsCandidates.filter((el) => el.type === \"msg\");\n          setRhsOptions(tmpArr);\n          break;\n        default:\n          break;\n      }\n    }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [curLhs]);\n\n  const addRemStatement = () => {\n    //both selects no need for validation\n    let statement = \"Remove \" + curRhs + \"from\" + curLhs;\n    let operation = \"REME    \" + curLhs + \",\" + curRhs;\n    save(statement, operation);\n    setEditOn(false);\n  }\n\n  return (\n    <Stack direction=\"row\">\n        <InlineText text=\"To \"/>\n        <Select\n          value={curLhs}\n          onChange = {(e) => setCurLhs(e.target.value)}\n        >\n        {\n          lhsCandidates.map((el, index) => {\n            if(el === undefined) return <></>;\n            return <MenuItem value={el.name}> {el.name} ({el.type})</MenuItem>;\n          })\n        }\n        </Select>\n        <InlineText text=\"remove\"/>\n        <Select\n          value={curRhs}\n          onChange = {(e) => setCurRhs(e.target.value)}\n        >\n          {\n            rhsOptions.map((el, index) => {\n              if(el === undefined) return <></>;\n              return <MenuItem value={el.name}> {el.name} ({el.type}) </MenuItem>\n            })\n          }\n        </Select>\n        <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addRemStatement}>\n          <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n        </IconButton>\n    </Stack>\n\n  );\n}\n\nexport default RemElemStatement;","import React, {useState } from 'react'\n\nimport {\n  Stack,\n  Select,\n  MenuItem,\n  IconButton,\n  TextField,\n} from \"@mui/material\"\nimport  AddCircleIcon from \"@mui/icons-material/AddCircle\"\nimport InlineText from '../InlineText'\n\nexport const RemNElemsStatement = (props) => {\n  const {save, setEditOn, variables } = props;\n  const [curLhs, setCurLhs] = useState(variables[0] === undefined ? \"\" : variables[0].name);\n  const [curRhs, setCurRhs] = useState(\"\");\n\n  const addRemStatement = () => {\n    if(!parseFloat(curRhs)){\n      let statement = \"Remove \" + curRhs + \" elements from\" + curLhs;\n      let operation = \"REMEN   \" + curLhs + \",\" + curRhs;\n      save(statement, operation);\n      setEditOn(false);\n    }\n    // TODO add error display\n\n  }\n\n  return (\n    <Stack direction=\"row\">\n        <InlineText text=\"To \"/>\n        <Select\n          value={curLhs}\n          onChange = {(e) => setCurLhs(e.target.value)}\n        >\n        {\n          variables.map((el, index) => {\n            if(el === undefined) return <></>;\n            return <MenuItem value={el.name}> {el.name} ({el.type}) </MenuItem>;\n          })\n        }\n        </Select>\n        <InlineText text=\"remove\"/>\n        <TextField\n          value = {curRhs}\n          onChange = {(e) => setCurRhs(e.target.value)}\n          type=\"number\"\n        />\n        <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addRemStatement}>\n          <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n        </IconButton>\n    </Stack>\n\n  );\n}\n\nexport default RemNElemsStatement;","import React, {useState} from \"react\"\nimport {\n  Stack,\n  Select,\n  MenuItem,\n  IconButton,\n} from \"@mui/material\"\n\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport InlineText from \"../InlineText\"\n\nexport const ClearListStatement = (props) => {\n  const {save, setEditOn, variables} = props;\n  const [curArg, setCurArg] = useState(\"\");\n\n  const addClearStatement = () => {\n    let statement = \"Clear \" + curArg;\n    let operation = \"CLR     \" + curArg;\n    save(statement, operation);\n    setEditOn(false);\n  }\n\n  return (\n    <Stack direction=\"row\">\n      <InlineText text=\"Clear list\" />\n      <Select\n        value={curArg}\n        onChange={(e) => setCurArg(e.target.value)}\n      >\n        {\n          variables.map((el, index) => {\n            return <MenuItem value={el.name}> {el.name} ({el.type}) </MenuItem>;\n          })\n        }\n      </Select>\n      <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addClearStatement}>\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n    </Stack>\n  );\n}\n\nexport default ClearListStatement;\n","import React, { useState} from \"react\"\nimport PropTypes from \"prop-types\";\nimport {\n  Stack,\n  Autocomplete,\n  TextField,\n  IconButton,\n  Select,\n  MenuItem,\n} from \"@mui/material\"\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport InlineText from \"../InlineText\"\n\nexport const AssignEnumStatement = (props) => {\n  const {save, setEditOn, variables} = props;\n\n  const [curLhs, setCurLhs] = useState(\"\");\n  const [curRhs, setCurRhs] = useState(\"\");\n  const [rhsError, setRhsError] = useState(false);\n  const [rhsCandidates, setRhsCandidates] = useState([]);\n\n  const addAssignStatement = () => {\n    //validate RHS\n    let err_flag = false;\n    if (\n      rhsCandidates.findIndex((el) => el === curRhs) === -1 ||\n      !isNaN(parseFloat(curRhs))\n    ){\n      setRhsError(true);\n      err_flag = true;\n    }\n    if(!err_flag){\n      let statement = curLhs + \" = \" + curRhs;\n      let operation = \"SET     \" + curLhs + \",\" + curRhs;\n      save(statement, operation);\n      setEditOn(false);\n      setRhsError(false);\n    }\n  }\n  const handleLhsChange = (value) => {\n    setCurLhs(value);\n    let val = variables.find(el => el.name === value);\n    setRhsCandidates(val.values.map((el,index)=>el.name));\n  };\n\n  const handleRhsChange = (value) => {\n    setCurRhs(value);\n  };\n\n  return (\n    <Stack direction=\"row\">\n      <Select\n        value={curLhs}\n        onChange = {(e) => handleLhsChange(e.target.value)}\n      >\n        {\n          variables.map((el, index) => {\n            return (\n              <MenuItem value={el.name}> {el.name} ({el.type}) </MenuItem>\n            );\n          })\n        }\n      </Select>\n      <InlineText text=\"=\" />\n      <Select\n        value={curRhs}\n        onChange={(e) => setCurRhs(e.target.value)}\n        disabled={curLhs === \"\"}\n      >\n        {\n          rhsCandidates.map((el,index) => {\n            return(\n              <MenuItem value={el}> {el} (enum value) </MenuItem>\n            )\n          })\n        }\n\n      </Select>\n      <Autocomplete\n        freeSolo\n        options={rhsCandidates}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{ width: \"200px\" }}\n        error={rhsError}\n        value={curRhs}\n        inputValue={curRhs}\n        disabled={curLhs === \"\"}\n        onInputChange={(event, value) => handleRhsChange(value)}\n        helperText=\"RHS must be a valid variable or a number\"\n      />\n      <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addAssignStatement}>\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n    </Stack>\n  );\n\n}\n\nAssignEnumStatement.propTypes = {\n  save: PropTypes.func.isRequired,\n  setEditOn: PropTypes.func.isRequired,\n  variables: PropTypes.arrayOf(PropTypes.shape({\n    name: PropTypes.string,\n    type: PropTypes.string,\n    values: PropTypes.arrayOf(PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    }))\n  })).isRequired,\n}\n\nexport default AssignEnumStatement;","import React, { useState } from \"react\"\n\nimport {\n  Stack,\n  Select,\n  MenuItem,\n  IconButton,\n} from \"@mui/material\";\n\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\"\nimport InlineText from \"../InlineText\";\n\nexport const SendStatement = (props) => {\n  const {save, setEditOn, connLists} = props;\n  const [receiver, setReceiver] = useState(\"\");\n\n  console.log(connLists);\n\n  const addSendStatement = () => {\n    let statement = \"Send to \" + receiver;\n    let operation = \"SEND    \" + receiver;\n    save(statement, operation);\n    setEditOn(false);\n  }\n\n  return (\n    <Stack direction=\"row\">\n      <InlineText text=\"Send the message to: \"/>\n      <Select\n        value={receiver}\n        onChange={(e) => setReceiver(e.target.value)}\n      >\n        {\n          connLists.map((el, index)=>{\n            return <MenuItem value={el.name}> {el.name} ({el.type}) </MenuItem>;\n          })\n        }\n      </Select>\n      <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addSendStatement}>\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n\n    </Stack>\n  )\n}\n\nexport default SendStatement;","import React, {useState} from 'react';\nimport {\n  Stack,\n  Select,\n  MenuItem,\n  IconButton\n} from \"@mui/material\"\n\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\"\nimport InlineText from '../InlineText';\n\n\nexport const GetLenStatement = (props) => {\n\n  const { save, setEditOn, lhsCandidates, rhsCandidates} = props;\n  const [curLhs, setCurLhs] = useState(\"\");\n  const [curRhs, setCurRhs] = useState(\"\");\n\n  const addLenStatement = () => {\n    if(curLhs !== \"\" && curRhs !== \"\"){\n      let statement = \"Let \" +curLhs + \"= len(\" + curRhs + \")\";\n      let operation = \"LEN     \" + curLhs + \",\" + curRhs;\n      save(statement, operation);\n      setEditOn(false);\n    }\n  }\n\n  return(\n    <Stack direction=\"row\">\n      <InlineText text=\"Let \" />\n      <Select\n        value={curLhs}\n        onChange={(e) => setCurLhs(e.target.value)}\n      >\n        {\n          lhsCandidates.map((el, index) => {\n            return <MenuItem value={el.name}> {el.name} ({el.type}) </MenuItem>\n          })\n        }\n      </Select>\n      <InlineText text=\"be the length of \" />\n      <Select\n        value={curRhs}\n        onChange={(e) => setCurRhs(e.target.value)}\n      >\n        {\n          rhsCandidates.map((el, index) => {\n            return <MenuItem value={el.name}> {el.name} ({el.type}) </MenuItem>\n          })\n        }\n      </Select>\n      <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addLenStatement}>\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n\n\n\n    </Stack>\n  );\n}\nexport default GetLenStatement;","import React, { useState } from \"react\";\n\nimport { Stack, Select, MenuItem, IconButton, Autocomplete, TextField } from \"@mui/material\";\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport InlineText from \"../InlineText\";\n\nexport const SubsetListStatement = (props) => {\n  const { save, setEditOn, lhsCandidates, rhsCandidates, numCandidates} = props;\n  const [curLhs, setCurLhs] = useState(\"\");\n  const [curRhs, setCurRhs] = useState(\"\");\n  const [curNum, setCurNum] = useState(1);\n  const [numError, setNumError] = useState(false);\n  // TODO add error display for mismatched types\n  // eslint-disable-next-line no-unused-vars\n  const [typeError, setTypeError] = useState(false);\n\n\n  const addSubsStatement = () => {\n    //validate number\n    let err_flag = false;\n    if(isNaN(parseInt(curNum))){\n      if(numCandidates.find(curNum) === undefined){\n        err_flag = true;\n        setNumError(true);\n      }\n    }else if(parseInt(curNum) < 1){\n      err_flag = true;\n      setNumError(true);\n    }\n    //validate types\n    const lhs = lhsCandidates.find((el) => el.name === curLhs)\n    const rhs = rhsCandidates.find((el) => el.name === curRhs)\n    if(lhs !== undefined && rhs !== undefined){\n      if(lhs.mode !== rhs.mode){\n        err_flag = true;\n        setTypeError(true);\n      }\n\n    }else{\n      err_flag = true;\n    }\n\n\n    if(!err_flag){\n      let statement = \"Let \" + curLhs + \" contain \" + curNum + \" elements of \" + curRhs;\n      let operation = \"SUBS    \" + curLhs + \",\" + curRhs + \",\" + curNum;\n      save(statement, operation);\n      setEditOn(false);\n      setNumError(false);\n    }\n  }\n\n  return (\n    <Stack direction=\"row\">\n      <InlineText text=\"Let \" />\n      <Select value={curLhs} onChange={(e) => setCurLhs(e.target.value)}>\n        {lhsCandidates.map((el, index) => {\n          if (el === undefined) return <></>;\n          return <MenuItem value={el.name}> {el.name} ({el.type}) </MenuItem>;\n        })}\n      </Select>\n      <InlineText text=\"contain\" />\n      <Autocomplete\n        options={numCandidates.map((el, index)=>el.name)}\n        renderInput={(params) => <TextField {...params} />}\n        sx={{ width: \"200px\" }}\n        value={curNum}\n        inputValue={curNum}\n        onInputChange={(e, value) => setCurNum(value)}\n        error={numError}\n      />\n      <InlineText text=\"elements of\" />\n      <Select\n        value={curRhs}\n        onChange = {(e) => setCurRhs(e.target.value)}\n      >\n        {\n          rhsCandidates.map((el, index) => {\n            if(el === undefined) return <></>;\n            return <MenuItem value={el.name}> {el.name} ({el.type}) </MenuItem>\n          })\n        }\n      </Select>\n      <IconButton sx={{ p: \"10px\" }} color=\"primary\" onClick={addSubsStatement}>\n        <AddCircleIcon sx={{ fontSize: \"30px\" }} />\n      </IconButton>\n    </Stack>\n  );\n};\n","import React, {useState, useEffect} from \"react\";\nimport { useSelector } from \"react-redux\";\n\n\nimport ExprStatement from \"./statements/ExprStatement\";\nimport DeclStatement from \"./statements/DeclStatement\";\nimport CondFloatStatement from \"./statements/CondFloatStatement\";\nimport CondEnumStatement from \"./statements/CondEnumStatement\";\nimport EndBlockStatement from \"./statements/EndBlockStatement\";\nimport WhileEnumStatement from \"./statements/WhileEnumStatement\";\nimport WhileFloatStatement from \"./statements/WhileFloatStatement\";\nimport AssignFloatStatement from \"./statements/AssignFloatStatement\";\nimport CondListStatement from \"./statements/CondListStatement\";\nimport AddElemStatement from \"./statements/AddElemStatement\";\nimport RemElemStatement from \"./statements/RemElemStatement\";\nimport RemNElemsStatement from \"./statements/RemNElemsStatement\";\nimport ClearListStatement from \"./statements/ClearListStatement\";\nimport AssignEnumStatement from \"./statements/AssignEnumStatement\";\nimport SendStatement from \"./statements/SendStatement\";\nimport GetLenStatement from \"./statements/GetLenStatement\";\nimport { SubsetListStatement } from \"./statements/SubsetListStatement\";\n\nimport {\n  selectParameters,\n} from \"../agentsTabSlice\";\n\nimport {\n  selectScopeVars\n} from \"./editorSlice\";\n\nconst read_only = [\n  { name: \"connCount\", type: \"float\" },\n  { name: \"msgRCount\", type: \"float\" },\n  { name: \"msgSCount\", type: \"float\" },\n];\n\nexport const StatementDisplay = (props) => {\n  const { save, editOn, setEditOn, statementType, sndMsg, rcvMsg} = props;\n\n  const params = useSelector(selectParameters);\n  const scopeVars = useSelector(selectScopeVars);\n\n  const [mutFloats, setMutFloats ] = useState([]);\n  const [floats, setFloats] = useState([]);\n  const [enums, setEnums] = useState([]);\n  const [connLists, setConnLists] = useState([])\n  // msgLists currently not used, but as they exist as a separate data type\n  // eslint-disable-next-line no-unused-vars\n  const [msgLists, setMsgLists] = useState([])\n  const [lists, setLists] = useState([])\n  const [listItems, setListItems] = useState([])\n  const rcvJid = {name: \"RCV.sender\", type: \"jid\"};\n  const rcvVar = {name: \"RCV\", type: \"msg\"};\n  const sendVar = {name: \"SEND\", type: \"msg\"};\n  const connectionsVar = {name: \"connections\", type: \"list\", mode: \"conn\"}\n\n\n  useEffect(()=>{\n    const floatParams = params.filter((el, index) => el.type === \"float\");\n    let toSetMutFloats = [...scopeVars, ...floatParams];\n    let toSetListItems = [...listItems];\n    if(sndMsg){\n      console.log(\"SEND available\")\n      toSetListItems = [...toSetListItems, sendVar];\n      let tmpArr = sndMsg.params.map((el,index)=>{\n        return {\n          name: \"SEND.\" + el.name,\n          type: el.type,\n        };\n      });\n      tmpArr = tmpArr.filter((el) => el.type === \"float\");\n      toSetMutFloats = [...toSetMutFloats, ...tmpArr];\n\n    }else{\n      let tmpArr = params.filter((el) => el.type === \"float\");\n      toSetMutFloats = [...toSetMutFloats, ...tmpArr];\n    }\n    setMutFloats(toSetMutFloats);\n    let toSetFloats = [...toSetMutFloats, ...read_only];\n    console.log(rcvMsg)\n    if(rcvMsg){\n      console.log(rcvMsg)\n      toSetListItems = [...toSetListItems, rcvVar, rcvJid];\n      let rcvParams = rcvMsg.params.map((el, index) => {\n        return {\n          name: \"RCV.\" + el.name,\n          type: el.type,\n        }\n      })\n      rcvParams = rcvParams.filter((el) => el.type === \"float\");\n      toSetFloats = [...toSetFloats, ...rcvParams];\n    }\n    setListItems(toSetListItems);\n    setFloats(toSetFloats);\n    let tmpEnums = params.filter((el) => el.type === \"enum\");\n    setEnums(tmpEnums);\n    // first lets get lists:\n    let lists = params.filter((el) => el.type === \"list\");\n    lists = [...lists, connectionsVar]\n    setLists(lists);\n    //then list subtypes\n    let tmpArr = [];\n    tmpArr = lists.filter((el) => el.mode === \"conn\");\n    setConnLists(tmpArr);\n    tmpArr = lists.filter((el) => el.mode === \"msg\");\n    setMsgLists(tmpArr);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scopeVars])\n\n  if (!editOn) return <></>;\n  switch (statementType) {\n    case \"subset\":\n      return (\n        <SubsetListStatement\n          save={save}\n          setEditOn={setEditOn}\n          lhsCandidates={lists}\n          rhsCandidates={lists}\n          numCandidates={floats}\n        />\n      )\n    case \"send\":\n      return (\n        <SendStatement\n          save={save}\n          setEditOn={setEditOn}\n          connLists={Object.values({...(rcvMsg !== undefined ? [...connLists, rcvJid] : [...connLists])})}\n        />\n      );\n    case \"get_len\":\n      return (\n        <GetLenStatement\n          save={save}\n          setEditOn={setEditOn}\n          lhsCandidates={mutFloats}\n          rhsCandidates={lists}\n        />\n      )\n    case \"assign_enum\":\n      return (\n        <AssignEnumStatement\n          save={save}\n          setEditOn={setEditOn}\n          variables={enums}\n        />\n      );\n    case \"add_element\":\n      return (\n        <AddElemStatement\n          save={save}\n          setEditOn={setEditOn}\n          lhsCandidates={lists}\n          rhsCandidates={listItems}\n        />\n      );\n    case \"rem_element\":\n      return (\n        <RemElemStatement\n          save={save}\n          setEditOn={setEditOn}\n          lhsCandidates={lists}\n          rhsCandidates={listItems}\n        />\n      );\n    case \"rem_n_el\":\n      return (\n        <RemNElemsStatement\n          save={save}\n          setEditOn={setEditOn}\n          variables={lists}\n        />\n      );\n    case \"clr_list\":\n      return (\n        <ClearListStatement\n          save={save}\n          setEditOn={setEditOn}\n          variables={lists}\n        />\n      );\n    case \"cond_list\":\n      return (\n        <CondListStatement\n          save={save}\n          setEditOn={setEditOn}\n          rhsCandidates={lists}\n          lhsCandidates={listItems}\n        />\n      );\n    case \"assign_float\":\n      return (\n        <AssignFloatStatement\n          save={save}\n          setEditOn={setEditOn}\n          lhsCandidates={mutFloats}\n          rhsCandidates={floats}\n        />\n      );\n    case \"expr\":\n      return (\n        <ExprStatement\n          save={save}\n          setEditOn={setEditOn}\n          lhsCandidates={mutFloats}\n          rhsCandidates={floats}\n        />\n      );\n    case \"decl\":\n      return (\n        <DeclStatement\n          save={save}\n          setEditOn={setEditOn}\n          variables={floats}\n        />\n      );\n    case \"cond_float\":\n      return (\n        <CondFloatStatement\n          save={save}\n          setEditOn={setEditOn}\n          variables={floats}\n        />\n      );\n    case \"cond_enum\":\n      return (\n        <CondEnumStatement\n          save={save}\n          setEditOn={setEditOn}\n          variables={enums}\n        />\n      );\n    case \"while_float\":\n      return (\n        <WhileFloatStatement\n          save={save}\n          setEditOn={setEditOn}\n          variables={floats}\n        />\n      );\n    case \"while_enum\":\n      return (\n        <WhileEnumStatement\n          save={save}\n          setEditOn={setEditOn}\n          variables={enums}\n        />\n      );\n    case \"endb\":\n      return <EndBlockStatement save={save} />;\n    default:\n      return <></>;\n  }\n};\n\nexport default StatementDisplay;\n","import React, { useState} from \"react\";\nimport {\n  Select,\n  MenuItem,\n  FormHelperText,\n  Stack,\n  Box,\n  IconButton,\n} from \"@mui/material\";\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport StatementDisplay from \"./StatementDisplay\";\n\nexport const FloatParamEditor = (props) => {\n  const { save, rcvMsg } = props;\n  const [editOn, setEditOn] = useState(false);\n  const [statementType, setStatementType] = useState(\"expr\");\n\n  return (\n    <>\n      <Stack direction=\"row\" sx={{ display: \"flex\" }}>\n        <Box sx={{ width: \"100%\" }}>\n          <Select\n            sx={{ width: \"100%\" }}\n            value={statementType}\n            onChange={(e) => setStatementType(e.target.value)}\n          >\n            <MenuItem value={\"assign_float\"}> Assignment (number) </MenuItem>\n            <MenuItem value={\"expr\"}> Math Expression </MenuItem>\n            <MenuItem value={\"decl\"}> Declaration </MenuItem>\n            <MenuItem value={\"cond_float\"}> Conditional (number) </MenuItem>\n            <MenuItem value={\"cond_enum\"}> Conditional (enum) </MenuItem>\n            <MenuItem value={\"cond_list\"}> Conditional (list) </MenuItem>\n            <MenuItem value={\"while_float\"}> Do while Condition (number) </MenuItem>\n            <MenuItem value={\"while_enum\"}> Do while Condition (enum) </MenuItem>\n            <MenuItem value={\"endb\"}> End Block (condition/while) </MenuItem>\n          </Select>\n          <FormHelperText> Choose statement type </FormHelperText>\n        </Box>\n        <IconButton\n          sx={{ width: 60, p: \"10px\" }}\n          color=\"primary\"\n          onClick={(e) => setEditOn(true)}\n          disabled={editOn}\n        >\n          <AddCircleIcon sx={{ fontSize: \"45px\" }} />\n        </IconButton>\n      </Stack>\n      <StatementDisplay save={save} editOn={editOn} setEditOn={setEditOn} statementType={statementType} rcvMsg={rcvMsg}/>\n    </>\n  );\n};\n\nexport default FloatParamEditor;\n","import React, {useState } from \"react\";\nimport {\n  Stack,\n  Box,\n  Select,\n  MenuItem,\n  FormHelperText,\n  IconButton,\n} from \"@mui/material\"\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport StatementDisplay from \"./StatementDisplay\";\n\nexport const EnumParamEditor = (props) => {\n\n  const {save, rcvMsg} = props;\n  const [editOn, setEditOn] = useState(false);\n\n  const [statementType, setStatementType] = useState(\"expr\");\n  return (\n    <>\n      <Stack direction=\"row\" sx={{ display: \"flex\" }}>\n        <Box sx={{ width: \"100%\" }}>\n          <Select\n            sx={{ width: \"100%\" }}\n            value={statementType}\n            onChange={(e) => setStatementType(e.target.value)}\n          >\n            <MenuItem value={\"assign_float\"}> Assignment (number) </MenuItem>\n            <MenuItem value={\"assign_enum\"}> Assignment (enum) </MenuItem>\n            <MenuItem value={\"expr\"}> Math Expression </MenuItem>\n            <MenuItem value={\"decl\"}> Declaration </MenuItem>\n            <MenuItem value={\"cond_float\"}> Conditional (number) </MenuItem>\n            <MenuItem value={\"cond_enum\"}> Conditional (enum) </MenuItem>\n            <MenuItem value={\"cond_list\"}> Conditional (list) </MenuItem>\n            <MenuItem value={\"while_float\"}> Do while Condition (number) </MenuItem>\n            <MenuItem value={\"while_enum\"}> Do while Condition (enum) </MenuItem>\n            <MenuItem value={\"endb\"}> End Block (condition/while) </MenuItem>\n          </Select>\n          <FormHelperText> Choose statement type </FormHelperText>\n        </Box>\n        <IconButton\n          sx={{ width: 60, p: \"10px\" }}\n          color=\"primary\"\n          onClick={(e) => setEditOn(true)}\n          disabled={editOn}\n        >\n          <AddCircleIcon sx={{ fontSize: \"45px\" }} />\n        </IconButton>\n      </Stack>\n      <StatementDisplay save={save} editOn={editOn} setEditOn={setEditOn} statementType={statementType} rcvMsg={rcvMsg}/>\n    </>\n  );\n}\n\nexport default EnumParamEditor;","import React, { useState }from \"react\";\nimport {\n  Stack,\n  Box,\n  Select,\n  MenuItem,\n  FormHelperText,\n  IconButton,\n} from \"@mui/material\"\n\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport StatementDisplay from \"./StatementDisplay\";\n\nexport const ListParamEditor = (props) => {\n  const {save, rcvMsg} = props;\n  const [editOn, setEditOn] = useState(false);\n\n  const [statementType, setStatementType] = useState(\"expr\");\n\n  return (\n    <>\n      <Stack direction=\"row\" sx={{ display: \"flex\" }}>\n        <Box sx={{ width: \"100%\" }}>\n          <Select\n            sx={{ width: \"100%\" }}\n            value={statementType}\n            onChange={(e) => setStatementType(e.target.value)}\n          >\n            <MenuItem value={\"add_element\"}> Add element to list </MenuItem>\n            <MenuItem value={\"rem_element\"}> Remove element from list </MenuItem>\n            <MenuItem value={\"rem_n_el\"}> Remove some elements from list </MenuItem>\n            <MenuItem value={\"clr_list\"}> Clear list </MenuItem>\n            <MenuItem value={\"subset\"}> Store subset of a list </MenuItem>\n            <MenuItem value={\"get_len\"}> Get length of a list </MenuItem>\n            <MenuItem value={\"expr\"}> Math Expression </MenuItem>\n            <MenuItem value={\"decl\"}> Declaration </MenuItem>\n            <MenuItem value={\"cond_float\"}> Conditional (number) </MenuItem>\n            <MenuItem value={\"cond_enum\"}> Conditional (enum) </MenuItem>\n            <MenuItem value={\"cond_list\"}> Conditional (list) </MenuItem>\n            <MenuItem value={\"while_float\"}> Do while Condition (number) </MenuItem>\n            <MenuItem value={\"while_enum\"}> Do while Condition (enum) </MenuItem>\n            <MenuItem value={\"endb\"}> End Block (condition/while) </MenuItem>\n          </Select>\n          <FormHelperText> Choose statement type </FormHelperText>\n        </Box>\n        <IconButton\n          sx={{ width: 60, p: \"10px\" }}\n          color=\"primary\"\n          onClick={(e) => setEditOn(true)}\n          disabled={editOn}\n        >\n          <AddCircleIcon sx={{ fontSize: \"45px\" }} />\n        </IconButton>\n      </Stack>\n      <StatementDisplay save={save} editOn={editOn} setEditOn={setEditOn} statementType={statementType} rcvMsg={rcvMsg}/>\n    </>\n  );\n}\n\nexport default ListParamEditor;","import React, { useState } from \"react\";\n\nimport {\n  Select,\n  MenuItem,\n  Stack,\n  Box,\n  IconButton,\n  FormHelperText,\n} from \"@mui/material\";\nimport AddCircleIcon from \"@mui/icons-material/AddCircle\";\nimport StatementDisplay from \"./StatementDisplay\";\n\nexport const SendMessageEditor = (props) => {\n  const { save, rcvMsg, sndMsg } = props;\n\n  const [statementType, setStatementType] = useState(\"assign_float\");\n  const [editOn, setEditOn] = useState(false);\n\n  return (\n    <>\n      <Stack direction=\"row\" sx={{ display: \"flex\" }}>\n        <Box sx={{ width: \"100%\" }}>\n          <Select\n            sx={{ width: \"100%\" }}\n            value={statementType}\n            onChange={(e) => setStatementType(e.target.value)}\n          >\n            <MenuItem value={\"assign_float\"}> Assignment (number) </MenuItem>\n            <MenuItem value={\"expr\"}> Math Expression </MenuItem>\n            <MenuItem value={\"decl\"}> Declaration </MenuItem>\n            <MenuItem value={\"cond_float\"}> Conditional (number) </MenuItem>\n            <MenuItem value={\"cond_enum\"}> Conditional (enum) </MenuItem>\n            <MenuItem value={\"cond_list\"}> Conditional (list) </MenuItem>\n            <MenuItem value={\"while_float\"}>\n              {\" \"}\n              Do while Condition (number){\" \"}\n            </MenuItem>\n            <MenuItem value={\"while_enum\"}>\n              {\" \"}\n              Do while Condition (enum){\" \"}\n            </MenuItem>\n            <MenuItem value={\"endb\"}> End Block (condition/while) </MenuItem>\n            <MenuItem value={\"send\"}> Send Message to </MenuItem>\n          </Select>\n          <FormHelperText> Choose statement type </FormHelperText>\n        </Box>\n        <IconButton\n          sx={{ width: 60, p: \"10px\" }}\n          color=\"primary\"\n          onClick={(e) => setEditOn(true)}\n          disabled={editOn}\n        >\n          <AddCircleIcon sx={{ fontSize: \"45px\" }} />\n        </IconButton>\n      </Stack>\n      <StatementDisplay\n        save={save}\n        editOn={editOn}\n        setEditOn={setEditOn}\n        statementType={statementType}\n        sndMsg={sndMsg}\n        rcvMsg={rcvMsg}\n      />\n    </>\n  );\n};\n\nexport default SendMessageEditor;\n","/* eslint-disable no-loop-func */\nimport React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { selectParameters } from \"../agentsTabSlice\";\nimport { selectBlockLvl, resetScope, selectActions } from \"./editorSlice\";\nimport { selectMessageTypes } from \"../../simulationSlice\";\nimport {\n  Container,\n  Dialog,\n  DialogTitle,\n  Select,\n  MenuItem,\n  FormGroup,\n  FormHelperText,\n  Button,\n  Alert,\n  TextField,\n} from \"@mui/material\";\n\nimport FloatParamEditor from \"./FloatParamEditor\";\nimport EnumParamEditor from \"./EnumParamEditor\";\nimport ListParamEditor from \"./ListParamEditor\";\nimport SendMessageEditor from \"./SendMessageEditor\";\n\nconst ActionEditor = (props) => {\n  const { onClose, open, rcvMsg } = props;\n  const dispatch = useDispatch();\n  const [actionType, setActionType] = useState(\"modify_self\");\n  const [selectedParam, setSelectedParam] = useState(-1);\n  const [sndMsg, setSndMsg] = useState(\"\");\n  const [blockError, setBlockError] = useState(false);\n\n  const existingActions = useSelector(selectActions);\n  const [actionName, setActionName] = useState(\"\");\n  const [nameError, setNameError] = useState(false);\n\n  const [sendError, setSendError] = useState(false);\n\n  const [statements, setStatements] = useState([]);\n  const [statementError, setStatementError] = useState(false);\n  const [actionOperations, setActionOperations] = useState([]);\n\n  const params = useSelector(selectParameters);\n  const block_lvl = useSelector(selectBlockLvl);\n  const messages = useSelector(selectMessageTypes);\n\n  const save = (statement, operation) => {\n    setStatements([...statements, statement]);\n    setActionOperations([...actionOperations, operation]);\n  };\n\n  const reset = () => {\n    dispatch(resetScope);\n    setActionType(\"modify_self\")\n    setSelectedParam(-1);\n    setBlockError(false);\n    setActionName(\"\")\n    setNameError(false);\n    setStatements([]);\n    setActionOperations([]);\n  }\n\n  // TODO: Add checking for empty instructions\n  const saveAction = () => {\n    console.log(messages)\n    let error_flag = false;\n    setSendError(false);\n    setNameError(false);\n    setBlockError(false);\n    setStatementError(false);\n    if (block_lvl) {\n      setBlockError(true);\n      error_flag = true;\n    }\n    if(statements.length === 0){\n      setStatementError(true);\n      error_flag = true;\n    }\n    if (actionName === \"\" || !isNaN(actionName)) {\n      setNameError(true);\n      error_flag = true;\n    }else if( existingActions.find((el => el.name === actionName))){\n      setNameError(true);\n      error_flag = true;\n    }\n    let code = \"ACTION \" + actionName + ',' + actionType;\n    if( actionType === \"send_msg\" ){\n      if(messages[sndMsg] === undefined){\n        error_flag = true;\n        setSendError(true);\n      }\n      code += \", \" + messages[sndMsg].name + \", \" + messages[sndMsg].type;\n    }\n    code += \"\\n\";\n    if(error_flag) return;\n    let parsedOpArr = [];\n    const rawOpArr = [...actionOperations];\n    while (rawOpArr.findIndex((el) => el.startsWith(\"DECL\")) !== -1) {\n      let index = rawOpArr.findIndex((el) => el.startsWith(\"DECL\"));\n      parsedOpArr.push(rawOpArr[index]);\n      rawOpArr.splice(index, 1);\n    }\n    rawOpArr.forEach((el) => parsedOpArr.push(el));\n    parsedOpArr.forEach((el) => (code += el + \"\\n\"));\n    code += \"EACTION\\n\";\n    let script = statements.join('\\n');\n    const ret_action = {\n      name: actionName,\n      code: code,\n      script: script,\n    }\n    reset();\n    onClose(ret_action);\n  };\n\n  const cancel = () => {\n    reset();\n    onClose(null);\n  }\n\n  const findUnmatchedIndexes = () => {\n    let end_indexes = statements.reduce((arr, e, i) => {\n      if (e.startsWith(\"End\")) {\n        arr.push(i);\n      }\n      return arr;\n    }, []);\n    let if_indexes = statements.reduce((arr, e, i) => {\n      if (e.startsWith(\"If\")) {\n        arr.push(i);\n      }\n      return arr;\n    }, []);\n    let stack = [];\n    let bad_ends = [];\n\n    statements.forEach((el, index)=> {\n      if(if_indexes.find(ind => ind === index) !== undefined){\n        stack.push(index);\n      }\n      if(end_indexes.find(ind => ind === index) !== undefined){\n        if(stack.length === 0){\n          bad_ends.push(index);\n        }\n        stack.pop()\n      }\n    })\n    return [...stack, ...bad_ends];\n  };\n\n  const StatementsList = (props) => {\n    let indentLevel = 0;\n    let indexes = [];\n    if (blockError) {\n      indexes = findUnmatchedIndexes();\n    }\n    return (\n      <ul>\n        {statements.map((value, index) => {\n          let correct = 0;\n          if (value.startsWith(\"If\") || value.startsWith(\"While\")) {\n            indentLevel += 4;\n            correct = -4;\n          } else if (value.startsWith(\"End\")) {\n            indentLevel -= 4;\n          }\n          let color = \"black\";\n          if (indexes.length > 0) {\n            if (indexes.findIndex((el) => el === index) !== -1) {\n              color = \"red\";\n            }\n          }\n          return (\n            <li\n              style={{ marginLeft: Math.max(indentLevel + correct, 0) + \"em\", color: color }}\n            >\n              {\" \"}\n              {value}{\" \"}\n            </li>\n          );\n        })}\n      </ul>\n    );\n  };\n\n  const ModeDisplay = (props) => {\n    if (props.param === undefined) return <></>;\n    switch (props.param.type) {\n      case \"float\":\n        return <FloatParamEditor save={save} rcvMsg={rcvMsg} />;\n      case \"enum\":\n        return <EnumParamEditor save={save} rcvMsg={rcvMsg} />;\n      case \"list\":\n        return <ListParamEditor save={save} rcvMsg={rcvMsg} />;\n      default:\n        return <></>;\n    }\n  };\n\n  return (\n    <Dialog\n      fullScreen={true}\n      onClose={onClose}\n      open={open}\n      disableAutoFocus={true}\n      disableEnforceFocus={true}\n    >\n      <Container sx={{ padding: 3 }}>\n        <DialogTitle> New action </DialogTitle>\n        <FormGroup fullWidth>\n          <TextField\n            value={actionName}\n            onChange={(e) => setActionName(e.target.value)}\n            label=\"Action name\"\n          />\n          <Select\n            value={actionType}\n            onChange={(e) => setActionType(e.target.value)}\n            sx={{ marginTop: 1 }}\n          >\n            <MenuItem value={\"modify_self\"}> Modify Self </MenuItem>\n            <MenuItem value={\"send_msg\"}> Send message </MenuItem>\n          </Select>\n          {actionType === \"modify_self\" ? (\n            <>\n              <Select\n                value={selectedParam}\n                onChange={(e) => setSelectedParam(e.target.value)}\n                sx={{ marginTop: 1 }}\n              >\n                <MenuItem value={-1}>\n                  <em>param...</em>\n                </MenuItem>\n                {params.map((param, index) => {\n                  return <MenuItem value={index}> {param.name} ({param.type}) </MenuItem>;\n                })}\n              </Select>\n              <FormHelperText>\n                {selectedParam === -1 ? \"Select param to change\" : \"\"}{\" \"}\n              </FormHelperText>\n              <StatementsList />\n              <ModeDisplay param={params[selectedParam]} />\n            </>\n          ) : (\n            <>\n              <TextField\n                value={sndMsg}\n                onChange={(e) =>{ setSndMsg(e.target.value)}}\n                label=\"Send message type\"\n                select\n                sx={{marginTop: 1}}\n              >\n                {\n                  messages.map((el, index) => {\n                    return <MenuItem value={index}> {el.name}_{el.type} </MenuItem>;\n                  })\n                }\n              </TextField>\n              <StatementsList />\n              <SendMessageEditor save={save} rcvMsg={rcvMsg} sndMsg={messages[sndMsg]} />\n            </>\n          )}\n        </FormGroup>\n        {blockError ? (\n          <Alert severity=\"error\" onClose={(e) => setBlockError(false)}>\n            Error saving! There is a conditional or a loop without matching\n            close block\n          </Alert>\n        ) : (\n          <></>\n        )}\n        {nameError ? (\n          <Alert severity=\"error\" onClose={(e) => setNameError(false)}>\n            Error saving! You need to set a unique name for the action, and it cannot\n            be a number!{\" \"}\n          </Alert>\n        ) : (\n          <></>\n        )}\n        {\n          sendError ? (\n            <Alert severity=\"error\" onClose={(e) => setSendError(false)}>\n              Error saving! Please choose a message type to send!\n            </Alert>\n          ) : (\n            <></>\n          )\n        }\n        {\n          statementError ? (\n            <Alert severity=\"error\" onClose={(e) => setStatementError(false)}>\n              Error saving! Action needs to contain some statements!\n            </Alert>\n          ) : (\n            <></>\n          )\n\n        }\n\n        <Button variant=\"contained\" onClick={saveAction}>\n          {\" \"}\n          Save action{\" \"}\n        </Button>\n        <Button variant=\"outlined\" onClick={cancel} sx={{margin: 2}}>\n          Cancel\n        </Button>\n      </Container>\n    </Dialog>\n  );\n};\n\nActionEditor.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n};\n\nexport default ActionEditor;\n","import React, {useState } from \"react\";\nimport {\n  FormControl, TextField, Button, Alert\n} from \"@mui/material\"\n\nimport ActionEditor from '../editors/ActionEditor';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addAction, resetScope, selectActions } from \"../editors/editorSlice\";\nimport { addBehav } from \"../agentsTabSlice\";\nimport { validateBehavName, errorCodes } from \"../../../app/utils\";\nimport { addName } from \"../../simulationSlice\";\n\nexport const OnSetupBehav = (props) => {\n\n  const {onClose} = props;\n\n  const [behavName, setBehavName] = useState(\"\")\n  const [actionDialogOpen, setActionDialogOpen] = useState(false);\n  const [nameError, setNameError] = useState(false);\n  const [nameErrorText, setNameErrorText] = useState(\"\");\n  const [actionError, setActionError] = useState(false);\n  const dispatch = useDispatch();\n  const actions = useSelector(selectActions);\n\n  const onActionDialogClose = (action) =>{\n    if(action !== null){\n      dispatch(addAction(action));\n    }\n    dispatch(resetScope);\n    setActionDialogOpen(false);\n  }\n\n  const saveBehaviour = () => {\n    let err_flag = false;\n    if(validateBehavName(behavName) !== 0){\n      err_flag = true;\n      const code = validateBehavName(behavName);\n      const error = errorCodes.find((el) => el.code === code);\n      setNameErrorText(error.info);\n      setNameError(true);\n    }\n    if(actions.length === 0){\n      err_flag = true;\n      setActionError(true);\n    }\n    if(!err_flag){\n      let code = \"BEHAV \" + behavName + \", setup\\n\";\n      actions.forEach(el => code+=el.code);\n      code += \"EBEHAV\\n\";\n      let behav = {\n        name: behavName,\n        actions: [...actions],\n        code: code,\n      }\n      dispatch(addBehav(behav));\n      dispatch(resetScope);\n      dispatch(addName(behavName));\n      onClose();\n    }\n  }\n\n\n  return (\n    <>\n    <ActionEditor open={actionDialogOpen} onClose={onActionDialogClose}/>\n    <FormControl fullWidth>\n      <TextField\n        variant=\"outlined\"\n        label=\"Name\"\n        id=\"behav_name\"\n        value={behavName}\n        onChange={(e)=>setBehavName(e.target.value)}\n      />\n    </FormControl>\n    <p><b>Actions: </b></p>\n    {\n      actions.map((el,index) => {\n        return <p> {el.name} </p>;\n      })\n    }\n    {\n      nameError ?\n        <Alert severity=\"error\" onClose={(e) => setNameError(false)}>\n          Name Error! {nameErrorText}\n        </Alert>\n      :\n      <></>\n    }\n    {\n      actionError ?\n        <Alert severity=\"error\" onClose={(e) => setActionError(false)}>\n          Error saving! Please add some actions!\n        </Alert>\n      :\n      <></>\n\n    }\n    <Button onClick={(e)=>setActionDialogOpen(true)}> Add Action </Button>\n    <Button onClick={saveBehaviour}> Add Behaviour </Button>\n    </>\n  );\n}\n\nexport default OnSetupBehav;","import React, { useState } from \"react\";\nimport {\n  FormControl, TextField, Button, InputAdornment, Alert\n} from \"@mui/material\"\n\nimport ActionEditor from '../editors/ActionEditor';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addAction, resetScope, selectActions } from \"../editors/editorSlice\";\nimport { addBehav } from \"../agentsTabSlice\";\nimport { validateBehavName, errorCodes } from \"../../../app/utils\";\nimport { addName } from \"../../simulationSlice\";\n\nexport const OneTimeBehav = (props) => {\n  const {onClose} = props;\n  const [behavName, setBehavName] = useState(\"\")\n  const [delay, setDelay] = useState(0);\n  const [actionDialogOpen, setActionDialogOpen] = useState(false);\n\n  const [nameError, setNameError] = useState(false);\n  const [nameErrorText, setNameErrorText] = useState(\"\");\n  const [actionError, setActionError] = useState(false);\n\n\n  const dispatch = useDispatch();\n  const actions = useSelector(selectActions);\n\n  const onActionDialogClose = (action) =>{\n    if(action !== null){\n      dispatch(addAction(action));\n    }\n    dispatch(resetScope);\n    setActionDialogOpen(false);\n  }\n\n  const saveBehaviour = () => {\n    let err_flag = false;\n    if(validateBehavName(behavName) !== 0){\n      err_flag = true;\n      const code = validateBehavName(behavName);\n      const error = errorCodes.find((el) => el.code === code);\n      setNameErrorText(error.info);\n      setNameError(true);\n    }\n    if(actions.length === 0){\n      err_flag = true;\n      setActionError(true);\n    }\n    if(!err_flag){\n      let code = \"BEHAV \" + behavName + \", one_time,\" + delay +\"\\n\";\n      actions.forEach(el => code+=el.code);\n      code += \"EBEHAV\\n\";\n      let behav = {\n        name: behavName,\n        actions: [...actions],\n        code: code,\n      }\n      dispatch(addBehav(behav));\n      dispatch(resetScope);\n      dispatch(addName(behavName));\n      onClose();\n    }\n  }\n\n  return (\n    <>\n    <ActionEditor open={actionDialogOpen} onClose={onActionDialogClose} />\n\n    <FormControl fullWidth>\n      <TextField\n        variant=\"outlined\"\n        label=\"Name\"\n        id=\"behav_name\"\n        value={behavName}\n        onChange={(e)=>setBehavName(e.target.value)}\n      />\n      <TextField\n        sx={{marginTop: 2}}\n        label=\"Delay\"\n        id=\"behav_delay\"\n        type=\"number\"\n        value={delay}\n        onChange={(e)=>setDelay(e.target.value)}\n        InputProps={{\n          startAdornment: <InputAdornment position=\"start\">s</InputAdornment>,\n        }}\n      />\n    </FormControl>\n    <p><b>Actions: </b></p>\n    {\n      actions.map((el,index) => {\n        return <p> {el.name} </p>;\n      })\n    }\n    {\n      nameError ?\n        <Alert severity=\"error\" onClose={(e) => setNameError(false)}>\n          Name Error! {nameErrorText}\n        </Alert>\n      :\n      <></>\n    }\n    {\n      actionError ?\n        <Alert severity=\"error\" onClose={(e) => setActionError(false)}>\n          Error saving! Please add some actions!\n        </Alert>\n      :\n      <></>\n\n    }\n    <Button onClick={(e)=>setActionDialogOpen(true)}> Add Action </Button>\n    <Button onClick={saveBehaviour}> Add Behaviour </Button>\n    </>\n  );\n}\n\nexport default OneTimeBehav;","import React, { useState } from \"react\";\nimport {\n  FormControl, TextField, Button, InputAdornment, Alert\n} from \"@mui/material\"\n\nimport ActionEditor from '../editors/ActionEditor';\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addAction, resetScope, selectActions } from \"../editors/editorSlice\";\nimport { addBehav } from \"../agentsTabSlice\";\nimport { validateBehavName, errorCodes } from \"../../../app/utils\";\nimport { addName } from \"../../simulationSlice\";\n\nexport const CyclicBehav = (props) => {\n  const {onClose} = props;\n  const [behavName, setBehavName] = useState(\"\")\n  const [cycle, setCycle] = useState(0);\n  const [actionDialogOpen, setActionDialogOpen] = useState(false);\n  const [nameError, setNameError] = useState(false);\n  const [nameErrorText, setNameErrorText] = useState(\"\");\n  const [actionError, setActionError] = useState(false);\n  const dispatch = useDispatch();\n  const actions = useSelector(selectActions);\n  const onActionDialogClose = (action) =>{\n    if(action !== null){\n      dispatch(addAction(action));\n    }\n    dispatch(resetScope);\n    setActionDialogOpen(false);\n  }\n\n  const saveBehaviour = () => {\n    let err_flag = false;\n    if(validateBehavName(behavName) !== 0){\n      err_flag = true;\n      const code = validateBehavName(behavName);\n      const error = errorCodes.find((el) => el.code === code);\n      setNameErrorText(error.info);\n      setNameError(true);\n    }\n    if(actions.length === 0){\n      err_flag = true;\n      setActionError(true);\n    }\n    if(!err_flag){\n      let code = \"BEHAV \" + behavName + \", cyclic,\" + cycle +\"\\n\";\n      actions.forEach(el => code+=el.code);\n      code += \"EBEHAV\\n\";\n      let behav = {\n        name: behavName,\n        actions: [...actions],\n        code: code,\n      }\n      dispatch(addBehav(behav));\n      dispatch(resetScope);\n      dispatch(addName(behavName));\n      onClose();\n    }\n  }\n\n  return (\n    <>\n    <ActionEditor open={actionDialogOpen} onClose={onActionDialogClose} />\n\n    <FormControl fullWidth>\n      <TextField\n        variant=\"outlined\"\n        label=\"Name\"\n        id=\"behav_name\"\n        value={behavName}\n        onChange={(e)=>setBehavName(e.target.value)}\n      />\n      <TextField\n        sx={{marginTop: 2}}\n        label=\"Delay\"\n        id=\"behav_delay\"\n        type=\"number\"\n        value={cycle}\n        onChange={(e)=>setCycle(e.target.value)}\n        InputProps={{\n          startAdornment: <InputAdornment position=\"start\">s</InputAdornment>,\n        }}\n      />\n    </FormControl>\n    <p><b>Actions: </b></p>\n    {\n      actions.map((el,index) => {\n        return <p> {el.name} </p>;\n      })\n    }\n    {\n      nameError ?\n        <Alert severity=\"error\" onClose={(e) => setNameError(false)}>\n          Name Error! {nameErrorText}\n        </Alert>\n      :\n      <></>\n    }\n    {\n      actionError ?\n        <Alert severity=\"error\" onClose={(e) => setActionError(false)}>\n          Error saving! Please add some actions!\n        </Alert>\n      :\n      <></>\n\n    }\n\n    <Button onClick={(e)=>setActionDialogOpen(true)}> Add Action </Button>\n    <Button onClick={saveBehaviour}> Add Behaviour </Button>\n    </>\n  );\n}\n\nexport default CyclicBehav;","import React, { useState } from \"react\";\nimport {\n  FormControl,\n  TextField,\n  Button,\n  MenuItem,\n  Alert,\n} from \"@mui/material\";\n\nimport ActionEditor from \"../editors/ActionEditor\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { addAction, resetScope, selectActions, resetActions } from \"../editors/editorSlice\";\nimport { selectMessageTypes, addName } from \"../../simulationSlice\";\nimport { addBehav } from \"../agentsTabSlice\";\nimport { validateBehavName, errorCodes } from \"../../../app/utils\";\n\nexport const MessageRecvBehav = (props) => {\n  const { onClose } = props;\n  const [behavName, setBehavName] = useState(\"\");\n\n  const [selectedMsg, setSelectedMsg] = useState(0);\n\n  const [actionDialogOpen, setActionDialogOpen] = useState(false);\n  const [nameError, setNameError] = useState(false);\n  const [nameErrorText, setNameErrorText] = useState(\"\");\n  const [actionError, setActionError] = useState(false);\n  const [messageError, setMessageError] = useState(false);\n  const dispatch = useDispatch();\n  const actions = useSelector(selectActions);\n  const messages = useSelector(selectMessageTypes);\n  const onActionDialogClose = (action) => {\n    if (action !== null) {\n      dispatch(addAction(action));\n    }\n    dispatch(resetScope);\n    setActionDialogOpen(false);\n  };\n\n  const saveBehaviour = () => {\n    let err_flag = false;\n    if (validateBehavName(behavName) !== 0) {\n      err_flag = true;\n      const code = validateBehavName(behavName);\n      const error = errorCodes.find((el) => el.code === code);\n      setNameErrorText(error.info);\n      setNameError(true);\n    }\n    if (actions.length === 0) {\n      err_flag = true;\n      setActionError(true);\n    }\n    if(messages[selectedMsg] === undefined){\n      err_flag = true;\n      setMessageError(true);\n    }\n    if (!err_flag) {\n      let code =\n        \"BEHAV \" +\n        behavName +\n        \",msg_rcv,\" +\n        messages[selectedMsg].name +\n        \",\" +\n        messages[selectedMsg].type +\n        \"\\n\";\n      actions.forEach((el) => (code += el.code));\n      code += \"EBEHAV\\n\";\n      let behav = {\n        name: behavName,\n        actions: [...actions],\n        code: code,\n      };\n      dispatch(addBehav(behav));\n      dispatch(resetScope);\n      dispatch(resetActions);\n      dispatch(addName(behavName));\n      onClose();\n    }\n  };\n\n  return (\n    <>\n      <ActionEditor\n        open={actionDialogOpen}\n        onClose={onActionDialogClose}\n        rcvMsg={messages[selectedMsg]}\n      />\n\n      <FormControl fullWidth>\n        <TextField\n          variant=\"outlined\"\n          label=\"Name\"\n          id=\"behav_name\"\n          value={behavName}\n          onChange={(e) => setBehavName(e.target.value)}\n        />\n        <TextField\n          value={selectedMsg}\n          onChange={(e) => setSelectedMsg(e.target.value)}\n          label=\"Message type\"\n          select\n          sx={{ marginTop: 2 }}\n        >\n          {messages.map((el, index) => {\n            return (\n              <MenuItem value={index}>\n                {\" \"}\n                {el.name}_{el.type}{\" \"}\n              </MenuItem>\n            );\n          })}\n        </TextField>\n      </FormControl>\n      <p>\n        <b>Actions: </b>\n      </p>\n      {actions.map((el, index) => {\n        return <p> {el.name} </p>;\n      })}\n    {\n      nameError ?\n        <Alert severity=\"error\" onClose={(e) => setNameError(false)}>\n          Name Error! {nameErrorText}\n        </Alert>\n      :\n      <></>\n    }\n    {\n      actionError ?\n        <Alert severity=\"error\" onClose={(e) => setActionError(false)}>\n          Error saving! Please add some actions!\n        </Alert>\n      :\n      <></>\n    }\n    {\n      messageError ?\n        <Alert severity=\"error\" onClose={(e) => setMessageError(false)}>\n          Erro saving! Please select a valid message type!\n        </Alert>\n      :\n      <></>\n    }\n\n      <Button onClick={(e) => setActionDialogOpen(true)}> Add Action </Button>\n      <Button onClick={saveBehaviour}> Add Behaviour </Button>\n    </>\n  );\n};\n\nexport default MessageRecvBehav;\n","import React from \"react\";\nimport {useDispatch} from \"react-redux\";\nimport {resetActions} from \"./editors/editorSlice\";\nimport PropTypes from \"prop-types\";\nimport { Container, Dialog, DialogTitle } from \"@mui/material\";\nimport OnSetupBehav from \"./behavs/OnSetupBehav\";\nimport OneTimeBehav from \"./behavs/OneTimeBehav\";\nimport CyclicBehav from \"./behavs/CyclicBehav\";\nimport MessageRecvBehav from \"./behavs/MessageRecvBehav\";\n\nconst BehavDialog = (props) => {\n  const { handleClose, open, type } = props;\n  const dispatch = useDispatch();\n\n  const saveCallback = () => {\n    dispatch(resetActions())\n    handleClose(false);\n  }\n\n  const wrappedHandleClose = () =>  {\n    dispatch(resetActions())\n    handleClose();\n\n  }\n\n  const ModeDisplay = () => {\n    switch (type) {\n      case \"onSetup\":\n        return <OnSetupBehav onClose={saveCallback}/>;\n      case \"oneTime\":\n        return <OneTimeBehav onClose={saveCallback}/>;\n      case \"cyclic\":\n        return <CyclicBehav onClose={saveCallback}/>;\n      case \"onMessageReceive\":\n        return <MessageRecvBehav onClose={saveCallback}/>;\n      default:\n        return <></>;\n    }\n  };\n\n  return (\n    <Dialog onClose={(e) => wrappedHandleClose()} open={open}>\n      <Container sx={{ padding: 3, width: \"35em\" }}>\n        <DialogTitle> New behaviour </DialogTitle>\n        <ModeDisplay />\n      </Container>\n    </Dialog>\n  );\n};\n\nBehavDialog.propTypes = {\n  onClose: PropTypes.func.isRequired,\n  open: PropTypes.bool.isRequired,\n  type: PropTypes.string.isRequired,\n};\n\nexport default BehavDialog;\n","import React from \"react\";\nimport PropTypes from \"prop-types\"\nimport {\n  Box,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemText,\n  FormControl,\n  InputLabel,\n  Select,\n  MenuItem,\n} from \"@mui/material\"\n\nexport const SelectList = (props) => {\n  const {name, collection, options, handleParamTypeChange, collectionItemClick, collectionDisplayFunction} = props\n\n  let itemDisplay = (item) => {\n    return item.name;\n  };\n\n  return (\n    <Box\n      sx={{\n        maxWidth: 360,\n        minWidth: 360,\n        bgcolor: \"background.paper\",\n        display: \"inline-block\",\n      }}\n    >\n      <nav aria-label=\"main parameters\">\n        <h2> {name} </h2>\n        <List\n          sx={{\n            minHeight: 422,\n            maxHeight: 422,\n            border: \"solid\",\n            borderColor: \"black\",\n            overflow: \"auto\",\n          }}\n        >\n          {collection.map((item, index) => {\n            return (\n              <ListItem key={index} disablePadding onClick={(e)=>collectionItemClick(index)}>\n                <ListItemButton >\n                  <ListItemText primary={collectionDisplayFunction === undefined ? itemDisplay(item) : collectionDisplayFunction(item)} />\n                </ListItemButton>\n              </ListItem>\n            );\n          })}\n        </List>\n        <FormControl fullWidth sx={{ marginTop: 2 }}>\n          <InputLabel> Select type </InputLabel>\n          <Select label=\"Select type\">\n            {\n              options.map((item) => {\n                return (\n                  <MenuItem value={item.value} onClick={handleParamTypeChange}>\n                    {item.display}\n                  </MenuItem>\n                )\n              })\n            }\n          </Select>\n        </FormControl>\n      </nav>\n    </Box>\n  );\n};\n\nSelectList.propTypes = {\n  name: PropTypes.string.isRequired,\n  collection: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string.isRequired,\n    })).isRequired,\n  options: PropTypes.arrayOf(\n    PropTypes.shape({\n      value: PropTypes.string.isRequired,\n      display: PropTypes.string.isRequired,\n    })).isRequired,\n  handleParamTypeChange: PropTypes.func.isRequired,\n  collectionItemClick: PropTypes.func.isRequired,\n}\n\nexport default SelectList;\n","import React from \"react\";\nimport PropTypes from \"prop-types\"\nimport {\n  Box,\n  List,\n  ListItem,\n  ListItemButton,\n  ListItemText,\n} from \"@mui/material\"\n\nconst DisplayList = (props) => {\n  const {name, collection, onItemClick, selectedItem } = props;\n\n  return(\n      <Box\n        sx={{\n          width: \"100%\",\n          height: 600,\n          maxWidth: 360,\n          bgcolor: \"background.paper\",\n          display: \"inline-block\",\n        }}\n      >\n        <nav aria-label=\"main agents\">\n          <h2> {name} </h2>\n          <List\n            sx={{\n              minHeight: 550,\n              maxHeight: 550,\n              overflow: \"auto\",\n              border: \"solid\",\n              borderColor: \"black\",\n            }}\n          >\n            {collection.map((item, index) => {\n              return (\n                <ListItem\n                sx={index === selectedItem ? {\n                  bgcolor: \"#1976d2\",\n                  color: \"white\"\n                } : {}}\n                disablePadding onClick={() => onItemClick(item, index)}>\n                  <ListItemButton>\n                    <ListItemText primary={item} />\n                  </ListItemButton>\n                </ListItem>\n              );\n            })}\n          </List>\n        </nav>\n      </Box>\n\n  )\n}\n\nDisplayList.propTypes = {\n  name: PropTypes.string.isRequired,\n  collection: PropTypes.arrayOf(PropTypes.string.isRequired).isRequired,\n  onItemClick: PropTypes.func\n}\n\nexport default DisplayList;","import React from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Stack from \"@mui/material/Stack\";\nimport Divider from \"@mui/material/Divider\";\nimport {\n  DialogActions,\n  DialogTitle,\n  Button,\n  Dialog,\n  DialogContent,\n  DialogContentText,\n  Alert\n} from \"@mui/material\";\nimport ParamsDialog from \"../components/ParamsDialog\";\nimport BehavDialog from \"./BehavDialog\";\nimport SelectList from \"../components/SelectList\";\nimport DisplayList from \"../components/DisplayList\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { validateAgentName, errorCodes } from \"../../app/utils\";\n\nimport { selectParameters, addParam, selectBehaviours, reset } from \"./agentsTabSlice\";\nimport {addAgent, selectAgents, addName } from \"../simulationSlice\";\n\nexport function AgentsTab(props) {\n\n  const dispatch = useDispatch();\n\n  const paramListOptions = [\n    { value: \"float\", display: \"Float\" },\n    { value: \"enum\", display: \"Enumerable\" },\n    { value: \"list\", display: \"Connections/Messages\" },\n  ];\n\n  const behavListOptions = [\n    { value: \"onSetup\", display: \"Setup\"},\n    { value: \"oneTime\", display: \"One Time\"},\n    { value: \"cyclic\", display: \"Cyclic\"},\n    { value: \"onMessageReceive\", display: \"On Message Receive\"}\n  ];\n\n  const [paramDialogOpen, setParamDialogOpen] = React.useState(false);\n  const [behavDialogOpen, setBehavDialogOpen] = React.useState(false);\n  const [paramDialogType, setParamDialogType] = React.useState(\"\");\n  const [behavDialogType, setBehavDialogType] = React.useState(\"\");\n  const [notifyError, setNotifyError] = React.useState(false);\n\n  const [agentName, setAgentName] = React.useState(\"\");\n  const [nameError, setNameError] = React.useState(false);\n  const [nameErrorText, setNameErrorText] = React.useState(\"\");\n  const [behavError, setBehavError] = React.useState(false);\n  const [paramError, setParamError] = React.useState(false);\n\n  const params = useSelector(selectParameters);\n  const behavs = useSelector(selectBehaviours);\n  const agents = useSelector(selectAgents);\n  //const messages = useSelector(selectMessageTypes);\n\n  const handleNameChange = (name) => {\n    setNameError(false);\n    setAgentName(name);\n  }\n\n\n  const handleParamTypeChange = (e) => {\n    setParamDialogType(e.target.dataset.value);\n    setParamDialogOpen(true);\n  };\n\n  const handleBehavTypeChange = (e) => {\n    setBehavDialogType(e.target.dataset.value);\n    setBehavDialogOpen(true);\n  }\n\n  const handleBehavClose = (error) => {\n    setNotifyError(error);\n    setBehavDialogOpen(false);\n  }\n\n  const handleParamClose = (error) => {\n    setNotifyError(error);\n    setParamDialogOpen(false);\n  };\n\n  const handleNotifyClose = () => {\n    setNotifyError(false);\n  };\n\n  const generatePRM = (param) => {\n    let code = \"PRM \" + param.name + \",\";\n    switch(param.type) {\n      case \"float\":\n        code += \"float,\";\n        switch(param.mode){\n          case \"init\":\n            code += \"init,\" + param.value + '\\n';\n            return code;\n          case \"distribution\":\n            code += \"dist,\" + param.distribution + ',';\n            param.distribution_args.forEach(el => code += el + \",\");\n            code = code.slice(0, -1) + '\\n';\n            return code;\n          default:\n            return \"\";\n        }\n      case \"enum\":\n        code += \"enum\";\n        param.values.forEach(val => code += \",\" + val.name + \",\" + val.percentage);\n        return code + \"\\n\";\n      case \"list\":\n        code += \"list,\";\n        switch(param.mode){\n          case \"conn\":\n            return code + \"conn\\n\";\n          case \"msg\":\n            return code + \"msg\\n\";\n          default:\n            return \"\";\n        }\n      default:\n        return \"\";\n    }\n  }\n\n\n  const saveAgent = () => {\n    let err_flag = false;\n    if(validateAgentName(agentName) !== 0){\n      err_flag = true;\n      let err_code = validateAgentName(agentName);\n      let error = errorCodes.find((el) => el.code === err_code);\n      setNameErrorText(error.info);\n      setNameError(true);\n    }\n    if(behavs.length === 0){\n      err_flag = true;\n      setBehavError(true);\n    }\n    if(params.length === 0){\n      err_flag = true;\n      setParamError(true);\n    }\n    if(!err_flag){\n      let code = \"AGENT \" + agentName +'\\n';\n      params.forEach(el => code += generatePRM(el));\n      behavs.forEach(el => code += el.code);\n      code += \"EAGENT\\n\";\n      let agent = {\n        name: agentName,\n        params: [...params],\n        behavs: [...behavs],\n        code: code,\n      }\n      dispatch(addAgent(agent));\n      dispatch(addName(agentName));\n      setAgentName(\"\");\n      console.log(\"Saving done!\")\n      dispatch(reset());\n    }\n  };\n\n  return (\n    <>\n      <ParamsDialog open={paramDialogOpen} onClose={handleParamClose} type={paramDialogType} addParam={addParam} />\n      <BehavDialog open={behavDialogOpen} handleClose={handleBehavClose} type={behavDialogType} />\n      <Dialog open={notifyError} onClose={handleNotifyClose}>\n        <DialogTitle> Error while saving </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            An error occured while attempting to save your data. This may be a\n            result of incorrectly filling out the form.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleNotifyClose}>Ok</Button>\n        </DialogActions>\n      </Dialog>\n\n      <Stack\n        direction=\"row\"\n        divider={\n          <Divider\n            orientation=\"vertical\"\n            flexItem\n            sx={{ color: \"black\", borderColor: \"black\", borderWidth: 1 }}\n          />\n        }\n        spacing={2}\n      >\n        <DisplayList\n          name=\"Created Agents\"\n          collection={agents.map(el => el.name)}\n        />\n        <Box\n          sx={{\n            width: \"100%\",\n            height: 700,\n            maxWidth: 720,\n            bgcolor: \"background.paper\",\n            display: \"inline-block\",\n            paddingTop: 9,\n            marginLeft: 10,\n          }}\n        >\n          <Stack>\n            <Box sx={{ textAlign: \"left\" }}>\n              <TextField\n                variant=\"outlined\"\n                label=\"Agent Type Name\"\n                id=\"agent_type_input\"\n                value={agentName}\n                onChange={(e) => handleNameChange(e.target.value)}\n              />\n            </Box>\n            <Stack direction=\"row\">\n              <SelectList\n                name=\"Parameters\"\n                collection={params}\n                collectionDisplayFunction={(item) => item.name + \" (\" + item.type + \")\"}\n                options={paramListOptions}\n                handleParamTypeChange={handleParamTypeChange}\n                collectionItemClick={()=>{}}\n              />\n              <SelectList\n                name=\"Behaviours\"\n                collection={behavs}\n                options={behavListOptions}\n                handleParamTypeChange={handleBehavTypeChange}\n                collectionItemClick={()=>{}}\n              />\n            </Stack>\n            {\n              behavError ?\n              <Alert severity=\"error\" onClose={(e) => setBehavError(false)}>Error saving! Please add some behaviours</Alert>\n              :\n              <></>\n            }\n            {\n              paramError ?\n              <Alert severity=\"error\" onClose={(e) => setParamError(false)}>Error saving! Please add some parameters</Alert>\n              :\n              <></>\n\n            }\n            {\n              nameError ?\n              <Alert severity=\"error\" onClose={(e) => setNameError(false)}>\n                Name Error: {nameErrorText}\n              </Alert>\n              :\n              <></>\n\n            }\n            <Button variant=\"contained\" onClick={saveAgent}> Add Agent </Button>\n          </Stack>\n        </Box>\n      </Stack>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\nimport { FormControl, TextField, Button } from \"@mui/material\";\n\nexport const MessageFloatParam = (props) => {\n  const {save} = props;\n\n  const [paramName, setParamName] = useState(\"\");\n  const [paramData, setParamData] = useState({});\n\n  const updateParamData = () => {\n    let newParamData = {};\n    newParamData.name = paramName;\n    newParamData.type = \"float\";\n    setParamData(newParamData);\n  };\n  // I have no idea why this works\n  useEffect(()=>{\n    updateParamData()\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [paramName]);\n\n\n  return (\n    <>\n      <FormControl fullWidth sx={{ marginTop: 2 }}>\n        <TextField\n          variant=\"outlined\"\n          label=\"Name\"\n          id=\"param_name\"\n          value={paramName}\n          onChange={(e) => setParamName(e.target.value)}\n        />\n      </FormControl>\n      <Button onClick={(e) => save(paramData)}> Add parameter </Button>\n    </>\n\n  );\n}\n\nexport default MessageFloatParam;","import React from \"react\";\nimport DialogTitle from \"@mui/material/DialogTitle\";\nimport Dialog from \"@mui/material/Dialog\";\nimport { Container } from \"@mui/material\";\nimport { validateQualifiedName } from \"../../app/utils\";\nimport MessageFloatParam from \"./MessageFloatParam\";\n\nimport {useDispatch} from \"react-redux\"\n\nexport const MessageParamsDialog = (props) => {\n  const { onClose, open, type, addParam} = props;\n  const dispatch = useDispatch();\n\n  const handleClose = (event, reason) => {\n    onClose(false);\n  };\n\n  const save = (paramData) => {\n    let param = {};\n    if(!validateQualifiedName(paramData.name)) onClose(true);\n    else {\n      param.name = paramData.name;\n      param.type = paramData.type;\n      dispatch(addParam(param));\n      onClose(false);\n    }\n  }\n\n  const ModeDisplay = () => {\n    switch (type) {\n      case \"float\":\n        return <MessageFloatParam save={save}/>;\n      default:\n        return <></>;\n    }\n  };\n\n  return (\n    <Dialog\n      onClose={handleClose}\n      open={open}\n      disableAutoFocus={true}\n      disableEnforceFocus={true}\n    >\n      <Container sx={{ padding: 3 }}>\n        <DialogTitle> New parameter </DialogTitle>\n        <ModeDisplay />\n      </Container>\n    </Dialog>\n  );\n}","import React, { useState } from \"react\";\nimport Box from \"@mui/material/Box\";\nimport TextField from \"@mui/material/TextField\";\nimport Stack from \"@mui/material/Stack\";\nimport Divider from \"@mui/material/Divider\";\nimport {\n  DialogActions,\n  DialogTitle,\n  Button,\n  Dialog,\n  DialogContent,\n  DialogContentText,\n  Select,\n  MenuItem,\n  Alert,\n} from \"@mui/material\";\nimport SelectList from \"../components/SelectList\";\nimport DisplayList from \"../components/DisplayList\";\nimport { MessageParamsDialog } from \"../components/MessageParamsDialog\";\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport {\n  selectParameters,\n  addParam,\n  setCurrentParam,\n  clearParams,\n} from \"../message_tab/messageTabSlice\";\n\nimport { selectMessageTypes, addMessage } from \"../simulationSlice\";\nimport { validateMessageName, FIPACommActs, errorCodes } from \"../../app/utils\";\n\nexport function MessageTab() {\n  const dispatch = useDispatch();\n  const paramListOptions = [{ value: \"float\", display: \"Float\" }];\n\n  const [fipaType, setFipaType] = useState(7);\n  const [open, setOpen] = useState(false);\n  const [dialogType, setDialogType] = useState(paramListOptions[0].value);\n  const [msgName, setMsgName] = useState(\"\");\n  const [nameError, setNameError] = useState(false);\n  const [notifyError, setNotifyError] = useState(false);\n  const [errorText, setErrorText] = useState(\"\");\n  const params = useSelector(selectParameters);\n\n  const messages = useSelector(selectMessageTypes);\n\n  const handleParamTypeChange = (e) => {\n    setDialogType(e.target.dataset.value);\n    setOpen(true);\n  };\n\n  const handleNameChange = (name) => {\n    setNameError(false);\n    setMsgName(name);\n  };\n\n  const handleClose = (error) => {\n    setNotifyError(error);\n    setOpen(false);\n  };\n\n  const handleNotifyClose = () => {\n    setNotifyError(false);\n  };\n\n  const paramClick = (index) => {\n    dispatch(setCurrentParam(index));\n  };\n\n  const addMessageClick = () => {\n    let err_flag = false;\n    console.log(validateMessageName(msgName, FIPACommActs[fipaType]));\n    if (validateMessageName(msgName, FIPACommActs[fipaType]) !== 0) {\n      let err_code = validateMessageName(msgName, FIPACommActs[fipaType]);\n      let error = errorCodes.find((el) => el.code === err_code);\n      setErrorText(error.info);\n      err_flag = true;\n      setNameError(true);\n    }\n    if (!err_flag) {\n      setNameError(false);\n      let newMsg = {};\n      newMsg.name = msgName;\n      newMsg.type = FIPACommActs[fipaType];\n      newMsg.params = params;\n      let code = \"MESSAGE \" + msgName + \",\" + FIPACommActs[fipaType] + \"\\n\";\n      params.forEach((el) => (code += \"PRM \" + el.name + \",float\\n\"));\n      dispatch(clearParams());\n      code += \"EMESSAGE\\n\";\n      newMsg.code = code;\n      setMsgName(\"\");\n      setFipaType(7);\n      dispatch(addMessage(newMsg));\n    }\n  };\n\n  return (\n    <>\n      <MessageParamsDialog\n        open={open}\n        onClose={handleClose}\n        type={dialogType}\n        addParam={addParam}\n      />\n      <Dialog open={notifyError} onClose={handleNotifyClose}>\n        <DialogTitle> Error while saving </DialogTitle>\n        <DialogContent>\n          <DialogContentText>\n            An error occured while attempting to save your data. This may be a\n            result of incorrectly filling out the form.\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleNotifyClose}>Ok</Button>\n        </DialogActions>\n      </Dialog>\n\n      <Stack\n        direction=\"row\"\n        divider={\n          <Divider\n            orientation=\"vertical\"\n            flexItem\n            sx={{ color: \"black\", borderColor: \"black\", borderWidth: 1 }}\n          />\n        }\n        spacing={2}\n      >\n        <DisplayList\n          name=\"Created Messages\"\n          collection={messages.map((it) => it.name)}\n          onItemClick={paramClick}\n        />\n        <Box\n          sx={{\n            width: \"100%\",\n            height: 700,\n            maxWidth: 800,\n            bgcolor: \"background.paper\",\n            display: \"inline-block\",\n            paddingTop: 9,\n            marginLeft: 10,\n          }}\n        >\n          <Stack>\n            <Box sx={{ textAlign: \"left\" }}>\n              <TextField\n                variant=\"outlined\"\n                label=\"Message Type Name\"\n                id=\"message_name_input\"\n                value={msgName}\n                onChange={(e) => handleNameChange(e.target.value)}\n              />\n              <Select\n                value={fipaType}\n                onChange={(e) => setFipaType(e.target.value)}\n                sx={{ width: 250 }}\n              >\n                {FIPACommActs.map((key, index) => {\n                  return <MenuItem value={index}> {key} </MenuItem>;\n                })}\n              </Select>\n            </Box>\n            <Stack direction=\"row\">\n              <SelectList\n                name=\"Parameters\"\n                collection={params}\n                collectionItemClick={paramClick}\n                options={paramListOptions}\n                handleParamTypeChange={handleParamTypeChange}\n              />\n            </Stack>\n            {nameError ? (\n              <Alert severity=\"error\" onClose={(e) => setNameError(false)}>\n                Name Error: {errorText}\n              </Alert>\n            ) : (\n              <></>\n            )}\n            <Button\n              variant=\"contained\"\n              sx={{ margin: 2 }}\n              onClick={addMessageClick}\n            >\n              {\" \"}\n              Add message{\" \"}\n            </Button>\n          </Stack>\n        </Box>\n      </Stack>\n    </>\n  );\n}\n","import React, { useState, useEffect } from \"react\";\n\nimport {\n  Stack,\n  TextField,\n  Select,\n  MenuItem,\n  Autocomplete,\n  Box,\n} from \"@mui/material\";\nimport { distributionsDict } from \"../../../app/utils\";\nimport InlineText from \"../../agents_tab/editors/InlineText\";\n\nexport const StatisticalRow = (props) => {\n  const { agentData, index, handleChange } = props;\n\n  const [mode, setMode] = useState(\"%\");\n  const [amount, setAmount] = useState(\"\");\n  const [connAmountData, setConnAmountData] = useState(\"\");\n  const [distribution, setDistribution] = useState(\"\");\n  const [distArgsOn, setDistArgsOn] = useState(false);\n\n  const [toChange, setToChange] = useState({});\n\n  const [distributionArgs, setDistributionArgs] = useState([]);\n\n  useEffect(()=>{\n    updateAgentData();\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  },[amount, connAmountData, distribution, distributionArgs])\n\n  useEffect(() => {\n    handleChange(toChange, index);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [toChange]);\n\n  const updateAgentData = () => {\n    let tmpAd = JSON.parse(JSON.stringify(agentData)); //make a copy of existing agentData\n    tmpAd.err_flag = 0;\n    if (isNaN(parseFloat(amount)) || parseFloat(amount) <= 0) {\n      tmpAd.err_flag = 1;\n    }\n    if (mode === \"%\") {\n      tmpAd.amount = amount + \"%\";\n    } else if (mode === \"#\") {\n      tmpAd.amount = amount;\n    } else {\n      tmpAd.err_flag = 2;\n    }\n\n    if (isNaN(parseInt(connAmountData))) {\n      let foundKey = Object.keys(distributionsDict).find((key, index) => {\n        return distributionsDict[key].name === connAmountData;\n      });\n      if (foundKey !== undefined) {\n        let foundDist = distributionsDict[foundKey];\n        if (foundDist.validate(distributionArgs)) {\n          tmpAd.draw_from_distribution = true;\n          tmpAd.distribution = foundKey;\n          tmpAd.dist_args = distributionArgs;\n        } else {\n          tmpAd.err_flag = 4;\n        }\n      } else {\n        tmpAd.err_flag = 3;\n      }\n    } else {\n      tmpAd.draw_from_distribution = false;\n      tmpAd.conn_amount = connAmountData;\n    }\n    setToChange(tmpAd);\n  };\n\n  const handleDistributionArgChange = (value, id) => {\n    let index = id.split(\"_\");\n    index = parseInt(index[index.length - 1]);\n    if (!isNaN(index)) {\n      let newArgs = [...distributionArgs];\n      newArgs[index] = value;\n      setDistributionArgs(newArgs);\n    }\n    updateAgentData();\n  };\n\n  const handleModeChange = (value) => {\n    setMode(value);\n    updateAgentData();\n  };\n\n  const handleAmountChange = (value) => {\n    setAmount(value);\n    updateAgentData();\n  };\n\n  const handleConnDataChange = (value) => {\n    setConnAmountData(value);\n    let found = Object.keys(distributionsDict).find((key, index) => {\n      return distributionsDict[key].name === value;\n    });\n    if (found !== undefined) {\n      setDistArgsOn(true);\n      setDistribution(found);\n    } else {\n      setDistArgsOn(false);\n      setDistribution(\"\");\n    }\n    updateAgentData();\n  };\n\n  return (\n    <Stack\n      direction=\"row\"\n      spacing={2}\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      sx={{ height: \"56px\", width: \"100%\" }}\n    >\n      <Box\n        sx={{\n          borderRight: \"solid\",\n          borderColor: \"black\",\n          width: \"100%\",\n          whiteSpace: \"nowrap\",\n          paddingLeft: \"20px\",\n          paddingRight: \"20px\",\n        }}\n      >\n        <InlineText text={agentData.name} />\n      </Box>\n      <Box\n        sx={{\n          borderRight: \"solid\",\n          borderColor: \"black\",\n          width: \"100%\",\n          whiteSpace: \"nowrap\",\n          paddingLeft: \"20px\",\n          paddingRight: \"20px\",\n        }}\n      >\n        <Stack direction=\"row\" spacing={2}>\n          <TextField\n            type=\"number\"\n            value={amount}\n            onChange={(e) => handleAmountChange(e.target.value)}\n          />\n          <Select\n            value={mode}\n            onChange={(e) => handleModeChange(e.target.value)}\n          >\n            <MenuItem value=\"%\"> % of population </MenuItem>\n            <MenuItem value=\"#\"> number of agents </MenuItem>\n          </Select>\n        </Stack>\n      </Box>\n      <Box sx={{ width: \"100%\", whiteSpace: \"nowrap\", p: \"20px\" }}>\n        <Stack direction=\"row\" spacing={2} alignItems=\"center\">\n          <Autocomplete\n            freeSolo\n            options={Object.keys(distributionsDict).map(\n              (el, index) => distributionsDict[el].name\n            )}\n            renderInput={(params) => <TextField {...params} />}\n            sx={{ width: \"150px\" }}\n            value={connAmountData}\n            inputValue={connAmountData}\n            onInputChange={(event, value) => handleConnDataChange(value)}\n          ></Autocomplete>\n          {distArgsOn ? (\n            [...Array(distributionsDict[distribution].arg_count).keys()].map(\n              (key, index) => {\n                return (\n                  <TextField\n                    label={distributionsDict[distribution].param_names[index]}\n                    type=\"number\"\n                    value={distributionArgs[index]}\n                    onChange={(e) => {\n                      handleDistributionArgChange(e.target.value, e.target.id);\n                    }}\n                    InputProps={{ inputProps: { step: 0.1 } }}\n                    sx={{ margin: 1, width: \"80px\" }}\n                    id={distribution + \"_param_\" + index}\n                  />\n                );\n              }\n            )\n          ) : (\n            <></>\n          )}\n        </Stack>\n      </Box>\n    </Stack>\n  );\n};\n\nexport default StatisticalRow;\n","import React, { useState, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { Grid, Divider, Box, Alert } from \"@mui/material\";\nimport { selectAgents } from \"../../simulationSlice\";\nimport StatisticalRow from \"./StatisticalRow\";\n\nconst errorAlerts = {\n  1: \"Amount of agents need to be a number!\",\n  2: \"Invalid environment description mode. Contact developers.\",\n  3: \"Amount of connections must be an integer or drawn from distribution!\",\n  4: \"Invalid arguments for the distribution!\",\n}\n\nexport const StatisticalDescEditor = (props) => {\n  const agents = useSelector(selectAgents);\n  const [agentData, setAgentData] = useState([]);\n  const [errorData, setErrorData] = useState([]);\n\n  const {codeCallback, displayError} = props;\n\n  const generateDEFG = (agent) => {\n    let code = \"DEFG \";\n    code += agent.name + \", \" + agent.amount + \", \";\n    if(agent.draw_from_distribution){\n      code += \"dist_\" + agent.distribution + \", \";\n      code += agent.dist_args.join(\", \");\n    }else {\n      code += agent.conn_amount;\n    }\n    return code;\n  }\n\n  useEffect(()=>{\n    console.log(agentData)\n    if(agentData.findIndex((ad, index) => {\n      return ad.err_flag > 0;\n    }) !== -1){\n      codeCallback(\"ERROR\", \"Fill out the form correctly!\", {});\n    }else if(agentData.reduce((prevRes, ad) => {\n      if(ad.amount === undefined) return prevRes;\n      if(ad.amount.slice(-1) === \"%\"){\n        console.log(ad.amount)\n        return prevRes + parseFloat(ad.amount);\n      }else{\n        return prevRes;\n      }\n    }, 0) !== 100){\n      codeCallback(\"ERROR\", \"Sum of percentages of population must be 100\", {})\n    }else{\n      let code = \"\";\n      agentData.forEach((ad, index) => {\n        code += generateDEFG(ad) + \"\\n\";\n      })\n       codeCallback(code, \"generated statistical description\", {agentData: agentData});\n    }\n\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [agentData])\n\n  const setRowError = (index, value) => {\n    let tmpArr = [...errorData];\n    tmpArr[index] = value;\n    setErrorData(tmpArr);\n  }\n\n  useEffect(() => {\n    let tmpArr = [];\n    let agent = {\n      name: \"\",\n      amount: \"0\",\n      conn_amount: 0,\n      draw_from_distribution: false,\n      distribution: \"\",\n      dist_args: [],\n      err_flag: 0,\n    };\n    agents.forEach((el) => {\n      agent.name = el.name;\n      tmpArr.push({...agent});\n    });\n    setAgentData(tmpArr);\n    let errArr = [];\n    errArr.length = agents.length;\n    errArr.fill(false);\n    setErrorData(errArr);\n  }, [agents]);\n\n  const handleAgentDataChange = (new_data, index) => {\n    let tmpArr = [...agentData];\n    tmpArr[index] = new_data;\n    setRowError(index, true);\n    setAgentData(tmpArr);\n  };\n\n  return (\n    <Box sx={{maxHeight: 600, overflow: \"auto\"}}>\n      <Grid container spacing={2}>\n        {/* Headers of columns */}\n        <Grid item xs={4}>\n          <h2> Type </h2>\n        </Grid>\n        <Grid item xs={4}>\n          <h2> Env % </h2>\n        </Grid>\n        <Grid item xs={4}>\n          <h2> # of connections </h2>\n        </Grid>\n        {\n          // generate editable columns\n          agentData.map((el, index) => {\n            return (\n              <Grid item xs={12}>\n                <StatisticalRow\n                  agentData={el}\n                  key={index}\n                  index={index}\n                  handleChange={handleAgentDataChange}\n                />\n                {\n                  el.err_flag > 0 && errorData[index] && displayError ?\n                    <Alert severity=\"error\" onClose={(e) => setRowError(index, false)}>{errorAlerts[el.err_flag]}</Alert>\n                    :\n                    <></>\n                }\n                <Divider />\n              </Grid>\n            );\n          })\n        }\n      </Grid>\n    </Box>\n  );\n};\n\nexport default StatisticalDescEditor;\n","import React, { useState } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Stack, Divider, Button, Grid, Alert, TextField } from \"@mui/material\";\nimport DisplayList from \"../components/DisplayList\";\nimport StatisticalDescEditor from \"./editors/StatisticalDescEditor\";\n\nimport { setGraph } from \"../simulationSlice\";\n\nconst graphDescTypes = [\"Statistical description\", \"Custom method\"]\n\nexport const GraphTab = (props) => {\n\n  const dispatch = useDispatch();\n\n  const [modeIndex, setModeIndex] = useState(0);\n  const [defgCode, setDefgCode] = useState(\"\");\n  const [error, setError] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [alertText, setAlertText] = useState(\"\");\n  const [alertDisplay, setAlertDisplay] = useState(false);\n  const [codeSet, setCodeSet] = useState(false);\n  const [graphSize, setGraphSize] = useState(\"\");\n  const [showError, setShowError] = useState(false);\n  const [graphData, setGraphData] = useState({})\n\n  const clickedMode = (el, index) => {\n    setModeIndex(index)\n  }\n\n  const codeCallback = (code, info, data) => {\n    setAlertDisplay(false)\n    setAlertText(info);\n    setGraphData(data);\n    setError(false);\n    setSuccess(false);\n    setCodeSet(false);\n    if(code === \"ERROR\"){\n      setError(true);\n    }else{\n      setDefgCode(code);\n      setSuccess(true);\n      setCodeSet(true);\n    }\n  }\n\n  const alertClose = () => {\n    setError(false);\n    setSuccess(false);\n    setAlertDisplay(false);\n  }\n\n  const saveGraph = () => {\n    setShowError(true);\n    setAlertDisplay(true)\n    switch(modeIndex) {\n      case 0:\n        if(codeSet){\n          if(isNaN(parseInt(graphSize))){\n            setSuccess(false);\n            setError(true);\n            setAlertText(\"Specify graph size!!!\");\n            break;\n          }\n          setSuccess(true);\n          let code = \"GRAPH statistical\\n\";\n          code += \"SIZE \" + graphSize + \"\\n\";\n          code += defgCode;\n          code += \"EGRAPH\\n\";\n          let graph = {\n            type: \"statistical\",\n            size: graphSize,\n            agents: graphData.agentData,\n            code: code,\n          }\n          dispatch(setGraph(graph));\n        }\n        break;\n      case 1:\n        break;\n      default:\n        break;\n    }\n\n  }\n\n  return (\n    <>\n    <Stack\n      direction=\"row\"\n      divider={\n        <Divider\n          orientation=\"vertical\"\n          flexItem\n          sx={{ color: \"black\", borderWidth: 1 }}\n        />\n      }\n      spacing={2}\n    >\n      <DisplayList\n        name=\"Graph description type\"\n        collection={graphDescTypes}\n        onItemClick={clickedMode}\n        selectedItem={modeIndex}\n      />\n      <Grid container\n      direction=\"column\"\n      >\n        <Grid item sx={2}>\n          <TextField label=\"Graph Size\" value={graphSize} onChange={(e) => setGraphSize(e.target.value)}/>\n        </Grid>\n        <Grid item sx={11}>\n        <StatisticalDescEditor codeCallback={codeCallback} displayError={showError} />\n        </Grid>\n        <Grid item sx={1}>\n          {\n            alertDisplay ? (\n              error ? (\n                <Alert severity=\"error\" onClose={alertClose}> {alertText}</Alert>\n              ) : success ? (\n                <Alert severity=\"success\" onClose={alertClose}> Saved sucessfully! </Alert>\n              ) : <> </>\n            ) : <></>\n          }\n        </Grid>\n        <Grid item sx={1}>\n        <Button variant=\"contained\" onClick={saveGraph} sx={{margin: 5}}> Save Graph Description </Button>\n        </Grid>\n      </Grid>\n    </Stack>\n    </>\n  );\n};\n\nexport default GraphTab;","import React, { useEffect }  from \"react\";\nimport Stack from \"@mui/material/Stack\";\nimport DisplayList from \"../components/DisplayList\";\nimport { Button } from \"@mui/material\";\nimport { useSelector } from \"react-redux\";\nimport { selectAgents, selectMessageTypes, selectGraph} from \"../simulationSlice\";\n\nexport function VisualizationTab() {\n  const [runningSimulations, setRunningSimulations] = React.useState([]);\n  const [simulationsOutput, setSimulationsOutput] = React.useState({});\n  const [selectedSimulationId, setSelectedSimulationId] = React.useState(\"\");\n  const messages = useSelector(selectMessageTypes)\n  const agents = useSelector(selectAgents);\n  const graph = useSelector(selectGraph);\n\n  const [code, setCode] = React.useState(\"\");\n\n  const generateCode = () => {\n    let tmp_code = \"\";\n    messages.forEach(el => tmp_code += el.code + '\\n');\n    agents.forEach(el => tmp_code += el.code + '\\n');\n    tmp_code += graph.code;\n    setCode(tmp_code);\n  }\n\n  useEffect(() => {\n    const runningSimulationsWebsocket = new WebSocket(\"ws://localhost:8000/simulations\");\n    console.debug(\"opened running simulations websocket\");\n    runningSimulationsWebsocket.onmessage = (message) => {\n      const data = JSON.parse(message.data)\n      setRunningSimulations(data.running_simulations)\n    };\n    runningSimulationsWebsocket.onclose = () => {\n      console.debug(\"closing running simulations websocket\");\n    }\n  }, []);\n\n  const getSimulationOutput = (simulationId) => {\n    return (simulationId in simulationsOutput) ? simulationsOutput[simulationId] : [];\n  }\n\n  const startNewSimulation = async () => {\n    const url = process.env.REACT_APP_SIMULATION_LOAD_BALANCER_URL + \"/simulations\";\n    console.log(process.env)\n    console.log(url)\n    const code_lines = code.split('\\n');\n    console.log(code_lines)\n    const code_data = JSON.stringify(code_lines);\n    console.log(code_data)\n    console.log(\"Making request to: \", url)\n    const response = await fetch(url, {method: 'POST', data: code_data});\n    console.log(\"Got response: \", response)\n    const data = await response.json();\n    console.log(data);\n    if (\"id\" in data) {\n      const simulationId = data.id;\n      setSelectedSimulationId(simulationId);\n      setSimulationsOutput(prevState => ({\n        ...prevState,\n        [simulationId]: []\n      }));\n      const simulationOutputWebsocket = new WebSocket(`ws://localhost:8000/simulations/${simulationId}`);\n      console.debug(`opened ${simulationId} websocket`);\n      simulationOutputWebsocket.onmessage = (message) => {\n        const data = JSON.parse(message.data);\n        const simulationId = data.id;\n        const outputLine = data.line;\n        setSimulationsOutput(prevState => ({\n            ...prevState,\n            [simulationId]: [...prevState[simulationId], outputLine]\n          })\n        );\n      }\n      simulationOutputWebsocket.onclose = () => {\n        console.debug(`closing ${simulationId} websocket`);\n      }\n    }\n  }\n\n  const deleteSimulation = async (simulationId) => {\n    const url = `http://localhost:8000/simulations/${simulationId}`;\n    await fetch(url, {method: 'DELETE'});\n    setSimulationsOutput(prevState => ({\n        ...prevState,\n        [simulationId]: []\n      })\n    );\n  }\n\n  return (\n    <div>\n      <Stack direction=\"row\" spacing={2}>\n        <Stack direction=\"column\" spacing={2}>\n          <DisplayList name=\"Running simulations\" collection={runningSimulations} onItemClick={setSelectedSimulationId} />\n          <Button onClick={startNewSimulation}>Start new simulation</Button>\n          <Button onClick={() => deleteSimulation(selectedSimulationId)}>Delete selected simulation</Button>\n        </Stack>\n        <DisplayList name=\"Output\" collection={getSimulationOutput(selectedSimulationId)} />\n        <Stack sx={{textAlign: \"left\", p: 3}}>\n          {\n            code.split('\\n').map((el, index) => {\n              return <div key={index}> {el} </div>;\n            })\n          }\n        <Button onClick={(e) => {generateCode()}}> Generate code </Button>\n        </Stack>\n      </Stack>\n    </div>\n  );\n}\n","import React from \"react\";\nimport Tabs from \"@mui/material/Tabs\";\nimport Tab from \"@mui/material/Tab\";\nimport Box from \"@mui/material/Box\";\nimport \"./App.css\";\nimport { TabPanel, a11yProps } from \"./features/tab_panel/TabPanel\";\nimport { AgentsTab } from \"./features/agents_tab/AgentsTab\";\nimport { MessageTab } from \"./features/message_tab/MessageTab\";\nimport GraphTab from \"./features/graph_tab/GraphTab\";\nimport { VisualizationTab } from \"./features/visualization_tab/VisualizationTab\";\n\nfunction App() {\n  const [value, setValue] = React.useState(0);\n\n  const handleChange = (event, newValue) => {\n    setValue(newValue);\n  };\n\n  return (\n    <div className=\"App\">\n      <Box sx={{ borderBottom: 1, borderColor: \"divider\" }}>\n        <Tabs\n          value={value}\n          onChange={handleChange}\n          aria-label=\"basic tabs example\"\n        >\n          <Tab label=\"Agents\" {...a11yProps(0)} />\n          <Tab label=\"Messages\" {...a11yProps(1)} />\n          <Tab label=\"Graph\" {...a11yProps(2)} />\n          <Tab label=\"Visualisation\" {...a11yProps(3)} />\n        </Tabs>\n      </Box>\n      <TabPanel value={value} index={0}>\n        <AgentsTab />\n      </TabPanel>\n      <TabPanel value={value} index={1}>\n        <MessageTab />\n      </TabPanel>\n      <TabPanel value={value} index={2}>\n        <GraphTab />\n      </TabPanel>\n      <TabPanel value={value} index={3}>\n        <VisualizationTab />\n      </TabPanel>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}