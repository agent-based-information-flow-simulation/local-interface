import React, { useEffect } from "react";
import Stack from "@mui/material/Stack";
import DisplayList from "../components/DisplayList";
import { Button } from "@mui/material";
import { useSelector } from "react-redux";
import {
  selectAgents,
  selectMessageTypes,
  selectGraph,
} from "../simulationSlice";

export function VisualizationTab() {
  const [runningSimulations, setRunningSimulations] = React.useState([]);
  const [simulationsOutput, setSimulationsOutput] = React.useState({});
  const [selectedSimulationId, setSelectedSimulationId] = React.useState("");
  const messages = useSelector(selectMessageTypes);
  const agents = useSelector(selectAgents);
  const graph = useSelector(selectGraph);

  const [code, setCode] = React.useState("");

  const generateCode = () => {
    let tmp_code = "";
    messages.forEach((el) => (tmp_code += el.code + "\n"));
    agents.forEach((el) => (tmp_code += el.code + "\n"));
    tmp_code += graph.code;
    setCode(tmp_code);
  };

  useEffect(() => {
    generateCode()
  // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [])

  // useEffect(() => {
  //   const runningSimulationsWebsocket = new WebSocket(
  //     "ws://localhost:8000/simulations"
  //   );
  //   console.debug("opened running simulations websocket");
  //   runningSimulationsWebsocket.onmessage = (message) => {
  //     const data = JSON.parse(message.data);
  //     setRunningSimulations(data.running_simulations);
  //   };
  //   runningSimulationsWebsocket.onclose = () => {
  //     console.debug("closing running simulations websocket");
  //   };
  // }, []);

  // const getSimulationOutput = (simulationId) => {
  //   return simulationId in simulationsOutput
  //     ? simulationsOutput[simulationId]
  //     : [];
  // };

  const startNewSimulation = async () => {
    const url = "http://localhost:3002/api/simulations";
    //tmp
    const code_lines = [
      "MESSAGE m1,Inform",
      "PRM p1,float",
      "EMESSAGE",
      "",
      "AGENT a1",
      "PRM p1,float,init,0",
      "BEHAV b1, cyclic,10",
      "ACTION a1,modify_self",
      "ADD     p1,p1",
      "EACTION",
      "EBEHAV",
      "EAGENT",
      "",
      "GRAPH statistical",
      "SIZE 100",
      "DEFG a1, 100%, 10",
      "EGRAPH",
      "",
    ];

    const response = await fetch(url, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({"aasm_code_lines" : code_lines})
    });

    console.log("Got response: ", response);
    const data = await response.json();

    // TODO websockets
    console.log(data);
    if ("id" in data) {
      const simulationId = data.id;
      setSelectedSimulationId(simulationId);
      setSimulationsOutput((prevState) => ({
        ...prevState,
        [simulationId]: [],
      }));
      const simulationOutputWebsocket = new WebSocket(
        `ws://localhost:8000/simulations/${simulationId}`
      );
      console.debug(`opened ${simulationId} websocket`);
      simulationOutputWebsocket.onmessage = (message) => {
        const data = JSON.parse(message.data);
        const simulationId = data.id;
        const outputLine = data.line;
        setSimulationsOutput((prevState) => ({
          ...prevState,
          [simulationId]: [...prevState[simulationId], outputLine],
        }));
      };
      simulationOutputWebsocket.onclose = () => {
        console.debug(`closing ${simulationId} websocket`);
      };
    }
  };

  const deleteSimulation = async (simulationId) => {
    const url = `http://localhost:8000/simulations/${simulationId}`;
    await fetch(url, { method: "DELETE" });
    setSimulationsOutput((prevState) => ({
      ...prevState,
      [simulationId]: [],
    }));
  };

  return (
    <div>
      <Stack direction="row" spacing={2}>
        <Stack direction="column" spacing={2}>
          <DisplayList
            name="Running simulations"
            collection={runningSimulations}
            onItemClick={setSelectedSimulationId}
          />
          <Button onClick={startNewSimulation}>Start new simulation</Button>
          <Button onClick={() => deleteSimulation(selectedSimulationId)}>
            Delete selected simulation
          </Button>
        </Stack>
        <DisplayList
          name="Output"
          collection={getSimulationOutput(selectedSimulationId)}
        />
        <Stack sx={{ textAlign: "left", p: 3 }}>
          {code.split("\n").map((el, index) => {
            return <div key={index}> {el} </div>;
          })}
          <Button
            onClick={(e) => {
              generateCode();
            }}
          >
            {" "}
            Generate code{" "}
          </Button>
        </Stack>
        <Stack direction="column" spacing={2}>
        </Stack>
      </Stack>
    </div>
  );
}
